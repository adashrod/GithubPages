{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/about/about.component.css","./src/app/about/about.component.html","./src/app/about/about.component.ts","./src/app/algorithms/depth-first-search-algorithm.ts","./src/app/algorithms/empty-algorithm.ts","./src/app/algorithms/kruskals-algorithm.ts","./src/app/algorithms/maze-generator.ts","./src/app/algorithms/prims-algorithm.ts","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/common/ordered-pair.ts","./src/app/common/unit.ts","./src/app/direction.ts","./src/app/factories/linear-wall-model-generator.ts","./src/app/factories/rectangular-wall-model-generator.ts","./src/app/factories/sheet-wall-model-generator.ts","./src/app/factories/sheet-wall-tiling-optimizer.ts","./src/app/help-modal/help-modal.component.css","./src/app/help-modal/help-modal.component.html","./src/app/help-modal/help-modal.component.ts","./src/app/help/help.component.css","./src/app/help/help.component.html","./src/app/help/help.component.ts","./src/app/lightbox-thumbnail/lightbox-thumbnail.component.css","./src/app/lightbox-thumbnail/lightbox-thumbnail.component.html","./src/app/lightbox-thumbnail/lightbox-thumbnail.component.ts","./src/app/maze-builder/maze-builder.component.css","./src/app/maze-builder/maze-builder.component.html","./src/app/maze-builder/maze-builder.component.ts","./src/app/maze-printer.ts","./src/app/misc/big-util.ts","./src/app/misc/svg-header.ts","./src/app/models/calibration-rectangle.ts","./src/app/models/linear-wall-model.ts","./src/app/models/maze-config.ts","./src/app/models/maze.ts","./src/app/models/path.ts","./src/app/models/rectangular-wall-model.ts","./src/app/models/shape.ts","./src/app/models/sheet-wall-model.ts","./src/app/models/space.ts","./src/app/models/vector-number.ts","./src/app/svg/path.ts","./src/app/svg/svg-element-generator.ts","./src/app/track-click.directive.ts","./src/app/welcome/welcome.component.css","./src/app/welcome/welcome.component.html","./src/app/welcome/welcome.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.css\n// module id = ./src/app/about/about.component.css\n// module chunks = main","module.exports = \"<p>\\n    The Laser-Cut Maze Designer was created by Aaron Rodriguez.\\n</p>\\n<p>\\n    The source code can be found on\\n    <a href=\\\"https://github.com/adashrod/LaserCutMazesAngular\\\" target=\\\"_blank\\\" appTrackClick category=\\\"About\\\" label=\\\"githubProject\\\">GitHub</a>.\\n    If you find a bug and would like to submit a report (or a feature request), you can do so\\n    <a href=\\\"https://github.com/adashrod/LaserCutMazesAngular/issues\\\" target=\\\"_blank\\\" appTrackClick category=\\\"About\\\" label=\\\"githubProjectIssues\\\">here</a>.\\n</p>\\n<p>\\n    Aaron's other projects can also be found on <a href=\\\"https://github.com/adashrod\\\" target=\\\"_blank\\\" appTrackClick category=\\\"About\\\" label=\\\"githubHome\\\">GitHub</a>.\\n</p>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.html\n// module id = ./src/app/about/about.component.html\n// module chunks = main","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: \"app-about\",\n    templateUrl: \"./about.component.html\",\n    styleUrls: [\"./about.component.css\"]\n})\nexport class AboutComponent implements OnInit {\n\n    constructor() {}\n\n    ngOnInit() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/about/about.component.ts","import MazeGenerator from \"app/algorithms/maze-generator\";\nimport OrderedPair from \"app/common/ordered-pair\";\nimport Maze from \"app/models/maze\";\nimport Direction from \"app/direction\";\n\nexport default class DepthFirstSearchAlgorithm extends MazeGenerator {\n    private maze: Maze;\n    private explored: Map<string, boolean> = new Map<string, boolean>(); // using a map with stringified keys as a HashSet\n    private deltas = [new OrderedPair<number>(0, -1), new OrderedPair<number>(1, 0),\n        new OrderedPair<number>(0, 1), new OrderedPair<number>(-1, 0)];\n\n    get name(): string {\n        return \"Depth-First Search\";\n    }\n\n    buildPaths(maze: Maze): void {\n        this.maze = maze;\n        this.explored.clear();\n        const stack: OrderedPair<number>[] = [];\n        let current = new OrderedPair<number>(this.rng(maze.numCols), this.rng(maze.numRows));\n        this.explored.set(new OrderedPair<number>(current.x, current.y).toString(), true);\n        const numSpaces = maze.numRows * maze.numCols;\n        while (this.explored.size < numSpaces) {\n            const neighbors = this.findUnexploredNeighbors(current.x, current.y);\n            if (neighbors.length > 0) {\n                const randomNeighbor = neighbors[this.rng(neighbors.length)];\n                stack.push(current);\n                const direction = Direction.determineDirection(current, randomNeighbor);\n                maze.grid[current.y][current.x].openWall(direction);\n                maze.grid[randomNeighbor.y][randomNeighbor.x].openWall(direction.opposite);\n                current = randomNeighbor;\n                this.explored.set(new OrderedPair<number>(current.x, current.y).toString(), true);\n            } else {\n                if (stack.length === 0) {\n                    break;\n                }\n                current = <OrderedPair<number>>stack.pop();\n            }\n        }\n    }\n\n    private findUnexploredNeighbors(x: number, y: number): OrderedPair<number>[] {\n        const neighbors: OrderedPair<number>[] = [];\n        for (const delta of this.deltas) {\n            if (this.maze.isInBounds(x + delta.x, y + delta.y) &&\n                    !this.explored.has(new OrderedPair<number>(x + delta.x, y + delta.y).toString())) {\n                neighbors.push(new OrderedPair<number>(x + delta.x, y + delta.y));\n            }\n        }\n        return neighbors;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/algorithms/depth-first-search-algorithm.ts","import MazeGenerator from \"app/algorithms/maze-generator\";\nimport Maze from \"app/models/maze\";\n\nexport default class EmptyAlgorithm extends MazeGenerator {\n    readonly name: string = \"Do-It-Yourself\";\n\n    buildPaths(maze: Maze): void {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/algorithms/empty-algorithm.ts","import MazeGenerator from \"app/algorithms/maze-generator\";\nimport OrderedPair from \"app/common/ordered-pair\";\nimport Maze from \"app/models/maze\";\nimport Direction from \"app/direction\";\n\n/**\n * Simple unidirectional tree for implementing a disjoint set\n */\nclass Tree {\n    parent: Tree = this;\n\n    get root(): Tree {\n        return this.parent === this ? this.parent : this.parent.root;\n    }\n\n    isConnectedTo(otherTree: Tree): boolean {\n        return this.root === otherTree.root;\n    }\n\n    merge(otherTree: Tree): void {\n        otherTree.root.parent = this;\n    }\n}\n\n/**\n * An edge is determined by the coordinates of the two spaces that it separates\n */\nclass Edge {\n    a: OrderedPair<number>;\n    b: OrderedPair<number>;\n\n    constructor(a: OrderedPair<number>, b: OrderedPair<number>) {\n        this.a = a;\n        this.b = b;\n    }\n}\n\n/**\n * An implementation of https://en.wikipedia.org/wiki/Kruskal%27s_algorithm for generating random 2D mazes with square\n * spaces\n * @author adashrod@gmail.com\n */\nexport default class KruskalsAlgorithm extends MazeGenerator {\n    private parallelMatrix: Tree[][] = [];\n    private edges: Edge[] = [];\n\n    get name(): string {\n        return \"Kruskal's\";\n    }\n\n    buildPaths(maze: Maze): void {\n        this.parallelMatrix = [];\n        this.edges = [];\n        for (let y = 0; y < maze.numRows; y++) {\n            this.parallelMatrix.push([]);\n            for (let x = 0; x < maze.numCols; x++) {\n                this.parallelMatrix[y].push(new Tree());\n                if (x + 1 < maze.numCols) {\n                    this.edges.push(new Edge(new OrderedPair(x, y), new OrderedPair(x + 1, y)));\n                }\n                if (y + 1 < maze.numRows) {\n                    this.edges.push(new Edge(new OrderedPair(x, y), new OrderedPair(x,     y + 1)));\n                }\n            }\n        }\n        this.shuffleEdges();\n        for (const e of this.edges) {\n            const s1 = e.a;\n            const s2 = e.b;\n            const tree1 = this.parallelMatrix[s1.y][s1.x];\n            const tree2 = this.parallelMatrix[s2.y][s2.x];\n            if (!tree1.isConnectedTo(tree2)) {\n                tree1.merge(tree2);\n                const oneToTwo = Direction.determineDirection(s1, s2);\n                maze.grid[s1.y][s1.x].openWall(oneToTwo);\n                maze.grid[s2.y][s2.x].openWall(oneToTwo.opposite);\n            }\n        }\n    }\n\n    private shuffleEdges(): void {\n        for (let i = 0; i < this.edges.length - 1; i++) {\n            const randIndex = this.rng(this.edges.length - i) + i;\n            const temp = this.edges[i];\n            this.edges[i] = this.edges[randIndex];\n            this.edges[randIndex] = temp;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/algorithms/kruskals-algorithm.ts","import { create, RandomSeed } from \"random-seed\";\n\nimport Maze from \"app/models/maze\";\n\n/**\n * Subclasses can use any maze-generation algorithm to build the paths of a maze\n * @author adashrod@gmail.com\n */\nexport default abstract class MazeGenerator {\n    _seed: string;\n    protected rng: RandomSeed = create();\n\n    abstract get name(): string;\n\n    abstract buildPaths(maze: Maze): void;\n\n    set seed(seed: number | string) {\n        this._seed = seed.toString();\n        this.rng = create(this._seed);\n    }\n\n    get seed(): number | string {\n        return this._seed;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/algorithms/maze-generator.ts","import MazeGenerator from \"app/algorithms/maze-generator\";\nimport OrderedPair from \"app/common/ordered-pair\";\nimport Maze from \"app/models/maze\";\nimport Direction from \"app/direction\";\n\n/**\n * An implementation of https://en.wikipedia.org/wiki/Prim%27s_algorithm for generating random 2D mazes with square\n * spaces\n * @author adashrod@gmail.com\n */\nexport default class PrimsAlgorithm extends MazeGenerator {\n    private maze: Maze;\n    private nextSpaces: OrderedPair<number>[] = [];\n    // for onPath and exploringNext, using a map with stringified keys as a HashSet\n    private onPath: Map<string, boolean> = new Map<string, boolean>();\n    private exploringNext: Map<string, boolean> = new Map<string, boolean>();\n    private deltas = [new OrderedPair<number>(0, -1), new OrderedPair<number>(1, 0),\n        new OrderedPair<number>(0, 1), new OrderedPair<number>(-1, 0)];\n\n    get name(): string {\n        return \"Prim's\";\n    }\n\n    buildPaths(maze: Maze): void {\n        this.maze = maze;\n        this.onPath.clear();\n        this.exploringNext.clear();\n        this.markOnPathAndAddUnexploredNeighborsToNext(this.rng(maze.numCols), this.rng(maze.numRows));\n        while (this.nextSpaces.length > 0) {\n            const removed = this.nextSpaces.splice(this.rng(this.nextSpaces.length), 1)[0];\n            const neighbors = this.findOnPathNeighbors(removed.x, removed.y);\n            const randNeighbor = neighbors[this.rng(neighbors.length)];\n\n            const direction = Direction.determineDirection(removed, randNeighbor);\n            maze.grid[removed.y][removed.x].openWall(direction);\n            maze.grid[randNeighbor.y][randNeighbor.x].openWall(direction.opposite);\n\n            this.markOnPathAndAddUnexploredNeighborsToNext(removed.x, removed.y);\n        }\n    }\n\n    private addToNextIfUnexplored(x: number, y: number): void {\n        if (this.maze.isInBounds(x, y) && this.isUnexplored(x, y)) {\n            this.exploringNext.set(new OrderedPair<number>(x, y).toString(), true);\n            this.nextSpaces.push(new OrderedPair(x, y));\n        }\n    }\n\n    private markOnPathAndAddUnexploredNeighborsToNext(x: number, y: number): void {\n        this.onPath.set(new OrderedPair<number>(x, y).toString(), true);\n        for (const delta of this.deltas) {\n            this.addToNextIfUnexplored(x + delta.x, y + delta.y);\n        }\n    }\n\n    private findOnPathNeighbors(x: number, y: number): OrderedPair<number>[] {\n        const n: OrderedPair<number>[] = [];\n        for (const delta of this.deltas) {\n            if (this.maze.isInBounds(x + delta.x, y + delta.y) &&\n                    this.onPath.has(new OrderedPair<number>(x + delta.x, y + delta.y).toString())) {\n                n.push(new OrderedPair<number>(x + delta.x, y + delta.y));\n            }\n        }\n        return n;\n    }\n\n    private isUnexplored(x: number, y: number): boolean {\n        const space = this.maze.grid[y][x];\n        return !space.isOpen(Direction.NORTH) && !space.isOpen(Direction.EAST) &&\n            !space.isOpen(Direction.SOUTH) && !space.isOpen(Direction.WEST) &&\n            !this.exploringNext.has(new OrderedPair<number>(x, y).toString());\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/algorithms/prims-algorithm.ts","module.exports = \".end-container {\\n    width: 100%;\\n    height: 170px;\\n    background: #5c2018;\\n}\\n\\nheader, footer {\\n    width: 800px;\\n    height: 100%;\\n    background: #5c2018 url(\\\"https://adashrod.github.io/LaserCutMazes/assets/logo1.png\\\") no-repeat 0 0;\\n    margin: 0 auto;\\n    color: #bc4639;\\n    font-size: 34px;\\n}\\n\\n.page-title, .copyright {\\n    padding-left: 180px;\\n}\\n\\n.copyright {\\n    font-size: 16px;\\n    padding-top: 10px;\\n}\\n\\nheader nav {\\n    padding: 75px 0 0 500px;\\n}\\n\\nfooter nav {\\n    padding: 75px 0 0 200px;\\n}\\n\\nnav a {\\n    color: #4285f4;\\n    font-size: 16px;\\n}\\n\\nnav a.active {\\n    font-style: italic;\\n}\\n\\n.main-body {\\n    border-top: 1px solid #bc4639;\\n    margin: 0 auto;\\n    padding: 5px;\\n    width: 800px;\\n    background: #bc4639;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<div class=\\\"end-container\\\">\\n    <header>\\n        <div class=\\\"page-title\\\">Laser-Cut Maze Designer</div>\\n        <nav>\\n            <a routerLink=\\\"/LaserCutMazes/welcome\\\" routerLinkActive=\\\"active\\\">Home</a>\\n            <a routerLink=\\\"/LaserCutMazes/designer\\\" routerLinkActive=\\\"active\\\">Maze Designer</a>\\n            <a routerLink=\\\"/LaserCutMazes/help\\\" routerLinkActive=\\\"active\\\">Help</a>\\n            <a routerLink=\\\"/LaserCutMazes/about\\\" routerLinkActive=\\\"active\\\">About</a>\\n        </nav>\\n    </header>\\n</div>\\n<div class=\\\"main-body\\\">\\n    <router-outlet></router-outlet>\\n</div>\\n<div class=\\\"end-container\\\">\\n    <footer>\\n        <div class=\\\"copyright\\\">&copy; 2018 Aaron Rodriguez</div>\\n        <nav>\\n            <a routerLink=\\\"/LaserCutMazes/welcome\\\" routerLinkActive=\\\"active\\\">Home</a>\\n            <a routerLink=\\\"/LaserCutMazes/designer\\\" routerLinkActive=\\\"active\\\">Maze Designer</a>\\n            <a routerLink=\\\"/LaserCutMazes/help\\\" routerLinkActive=\\\"active\\\">Help</a>\\n            <a routerLink=\\\"/LaserCutMazes/about\\\" routerLinkActive=\\\"active\\\">About</a>\\n        </nav>\\n    </footer>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component, OnInit } from \"@angular/core\";\nimport { NavigationEnd, Router } from \"@angular/router\";\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent implements OnInit {\n    constructor(private router: Router) {\n        this.router.events.subscribe(event => {\n            if (event instanceof NavigationEnd && typeof (<any>window).ga === \"function\") {\n                (<any>window).ga(\"set\", \"page\", event.urlAfterRedirects);\n                (<any>window).ga(\"send\", \"pageview\");\n            }\n        });\n    }\n\n    ngOnInit(): void {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { MazeBuilderComponent } from \"app/maze-builder/maze-builder.component\";\nimport { AppComponent } from \"app/app.component\";\nimport { HelpComponent } from \"app/help/help.component\";\nimport { HelpModalComponent } from \"app/help-modal/help-modal.component\";\nimport { WelcomeComponent } from \"app/welcome/welcome.component\";\nimport { LightboxThumbnailComponent } from \"app/lightbox-thumbnail/lightbox-thumbnail.component\";\nimport { AboutComponent } from \"app/about/about.component\";\nimport { TrackClickDirective } from \"app/track-click.directive\";\n\nconst appRoutes: Routes = [{\n    path: \"LaserCutMazes/welcome\",\n    component: WelcomeComponent\n}, {\n    path: \"LaserCutMazes/designer\",\n    component: MazeBuilderComponent\n}, {\n    path: \"LaserCutMazes/help\",\n    component: HelpComponent\n}, {\n    path: \"LaserCutMazes/about\",\n    component: AboutComponent\n}, {\n    path: \"LaserCutMazes\",\n    redirectTo: \"LaserCutMazes/welcome\",\n    pathMatch: \"prefix\"\n}];\n@NgModule({\n    declarations: [\n        AboutComponent,\n        AppComponent,\n        HelpComponent,\n        HelpModalComponent,\n        LightboxThumbnailComponent,\n        MazeBuilderComponent,\n        WelcomeComponent,\n        TrackClickDirective\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        RouterModule.forRoot(appRoutes)\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import Big from \"big.js\";\n\n/**\n * A container for two numeric coordinates\n * @author adashrod@gmail.com\n */\nexport default class OrderedPair<T> {\n    x: T;\n    y: T;\n\n    constructor(x: T, y: T) {\n        this.x = x;\n        this.y = y;\n    }\n\n    equals(aPair: OrderedPair<T>): boolean {\n        if (this.x instanceof Big && this.y instanceof Big && aPair.x instanceof Big && aPair.y instanceof Big) {\n            return this.x.eq(aPair.x) && this.y.eq(aPair.y);\n        }\n        return this.x === aPair.x && this.y === aPair.y;\n    }\n\n    toString(): string {\n        return `OrderedPair(${this.x.toString()}, ${this.y.toString()})`;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/common/ordered-pair.ts","import Big from \"big.js\";\n\nexport default class Unit {\n    static INCHES: Unit = new Unit(\"inch\", \"es\", new Big(1));\n    static CENTIMETERS: Unit = new Unit(\"centimeter\", \"s\", new Big(\"2.54\"));\n    static MILLIMETERS: Unit = new Unit(\"millimeter\", \"s\", new Big(\"25.4\"));\n\n    readonly singularName: string;\n    readonly pluralName: string;\n    readonly perInch: Big;\n\n    private constructor(singularName: string, pluralSuffix: string, perInch: Big) {\n        this.singularName = singularName;\n        this.pluralName = singularName + pluralSuffix;\n        this.perInch = perInch;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/common/unit.ts","import OrderedPair from \"app/common/ordered-pair\";\n\n/**\n * four directions for relating Spaces to each other\n */\nexport default class Direction {\n    static NORTH: Direction = new Direction(\"NORTH\");\n    static EAST: Direction = new Direction(\"EAST\");\n    static SOUTH: Direction = new Direction(\"SOUTH\");\n    static WEST: Direction = new Direction(\"WEST\");\n\n    readonly name: string;\n\n    /**\n     * Determines the direction that relates \"from\" to \"to\", e.g. if \"to\" is to the EAST of \"from\", EAST is returned\n     */\n    static determineDirection(from: OrderedPair<number>, to: OrderedPair<number>): Direction {\n        const xComp = from.x - to.x;\n        if (xComp < 0) { return Direction.EAST; }\n        if (xComp > 0) { return Direction.WEST; }\n        const yComp = from.y - to.y;\n        if (yComp < 0) { return Direction.SOUTH; }\n        if (yComp > 0) { return Direction.NORTH; }\n        throw new Error(`Indeterminate: the 2 OrderedPairs couldn't be compared: ${from.toString()}, ${to.toString()}`);\n    }\n\n    private constructor(name: string) {\n        this.name = name;\n    }\n\n    get opposite(): Direction {\n        if (this === Direction.NORTH) {\n            return Direction.SOUTH;\n        }\n        if (this === Direction.EAST) {\n            return Direction.WEST;\n        }\n        if (this === Direction.SOUTH) {\n            return Direction.NORTH;\n        }\n        if (this === Direction.WEST) {\n            return Direction.EAST;\n        }\n        throw new Error(\"invalid direction\");\n    }\n\n    toString(): string {\n        return this.name;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/direction.ts","import OrderedPair from \"app/common/ordered-pair\";\nimport LinearWallModel, { Wall as LwmWall } from \"app/models/linear-wall-model\";\nimport Maze from \"app/models/maze\";\nimport Space from \"app/models/space\";\nimport Direction from \"app/direction\";\n\nexport default class LinearWallModelGenerator {\n    private maze: Maze;\n    /**\n     * if favorEwWalls is true, the generator will build east-west (horizontal) walls first, and north-south (vertical)\n     * walls second; if false, vice-versa. The important difference is which wall will permeate through a plus-shaped\n     * intersection of two long walls. The second wall built will be split at the intersection into 2 parts.\n     * @return true for east-west, false for north-south\n     */\n    favorEwWalls: boolean;\n\n    constructor(maze: Maze) {\n        this.maze = maze;\n    }\n\n    generate(): LinearWallModel {\n        const width = this.maze.numCols;\n        const height = this.maze.numRows;\n        const lastCol = width - 1;\n        const lastRow = height - 1;\n        const linearWallModel = new LinearWallModel(width, height, this.favorEwWalls);\n\n        if (this.favorEwWalls) {\n            // make north walls of the rows\n            for (let y = 0; y < height; y++) {\n                this.makeWallsForLane(linearWallModel, y, width, false, Direction.NORTH, null, false);\n            }\n            // south wall of row\n            this.makeWallsForLane(linearWallModel, lastRow, width, false, Direction.SOUTH, null, true);\n            // make west walls of columns\n            for (let x = 0; x < width; x++) {\n                this.makeWallsForLane(linearWallModel, x, height, true, Direction.WEST, Direction.SOUTH, false);\n            }\n            // east wall of column\n            this.makeWallsForLane(linearWallModel, lastCol, height, true, Direction.EAST, Direction.SOUTH, true);\n        } else {\n            // make west walls of columns\n            for (let x = 0; x < width; x++) {\n                this.makeWallsForLane(linearWallModel, x, height, true, Direction.WEST, null, false);\n            }\n            // east wall of column\n            this.makeWallsForLane(linearWallModel, lastCol, height, true, Direction.EAST, null, true);\n            // make north walls of the rows\n            for (let y = 0; y < height; y++) {\n                this.makeWallsForLane(linearWallModel, y, width, false, Direction.NORTH, Direction.EAST, false);\n            }\n            // south wall of row\n            this.makeWallsForLane(linearWallModel, lastRow, width, false, Direction.SOUTH, Direction.EAST, true);\n        }\n        return linearWallModel;\n    }\n\n    /**\n     * traverses a lane (row or column) of the maze, making as many walls that are needed for that lane, consolidating\n     * adjacent walls when possible.\n     * e.g. a row like ___ __ (3 spaces with walls, 1 empty, 2 more with walls)\n     * This would make two walls; one 3 spaces long and the other 2 spaces long\n     * e.g. when an overlapCheckDirection is used: ___|_\n     *                                                |\n     *     There's a wall 4 spaces long, and a perpendicular wall. If building vertical walls first, this horizontal\n     *     wall would be split into 2 separate horizontal walls: one length 3, and one length 1, end-to-end, but separate\n     *     so that the perpendicular wall doesn't overlap. If doing horizontal walls first, this would result in one\n     *     horizontal wall 4 spaces long and two separate vertical walls.\n     * @param linearWallModel            the model walls are being added to\n     * @param majorTraversalIndex        the index of the lane being traversed\n     * @param minorTraversalMax          number of spaces in the lane\n     * @param xMajor                     true if doing an x-major (column-major) traversal\n     * @param continuationCheckDirection direction to check that the wall continues, e.g. if doing a row-major traversal\n     *                                   (moving east), one should check that there are walls on the north or south sides\n     *                                   of the spaces to see how far they continue\n     * @param overlapCheckDirection      direction to check for perpendicular walls, e.g. if doing a row-major traversal\n     *                                   (moving east), one should check that there are perpendicular walls to the east\n     *                                   which would determine the end of the current wall\n     * @param isFinalWall                true if this is the last row/column being checked, used for determining\n     *                                   coordinates since n rows means n+1 rows of horizontal walls\n     */\n    private makeWallsForLane(linearWallModel: LinearWallModel, majorTraversalIndex: number,\n            minorTraversalMax: number, xMajor: boolean, continuationCheckDirection: Direction,\n            overlapCheckDirection: Direction | null, isFinalWall: boolean): void {\n        for (let i = 0; i < minorTraversalMax; i++) {\n            const y = xMajor ? i : majorTraversalIndex;\n            const x = xMajor ? majorTraversalIndex : i;\n            const currentSpace = this.maze.grid[y][x];\n            if (!currentSpace.isOpen(continuationCheckDirection)) {\n                const lengthAndAdditive = this.calculateWallLength(xMajor, continuationCheckDirection,\n                    overlapCheckDirection, isFinalWall, x, y);\n                const length = lengthAndAdditive.x;\n                const additive = lengthAndAdditive.y;\n                linearWallModel.addWall(this.createWallHelper(xMajor, isFinalWall, x, y, length));\n                i += length + additive;\n            }\n        }\n    }\n\n    private calculateWallLength(xMajor: boolean, continuationCheckDirection: Direction, overlapCheckDirection: Direction | null,\n            isFinalWall: boolean, x: number, y: number): OrderedPair<number> {\n        let length: number, additive = 0;\n        for (length = 1; this.maze.isInBounds(xMajor ? x : x + length, xMajor ? y + length : y); length++) {\n            // wall continuation check\n            const nextSpace = this.findNextSpace(xMajor, x, y, length);\n            if (nextSpace.isOpen(continuationCheckDirection)) {\n                break;\n            }\n            // wall overlap check\n            if (overlapCheckDirection != null) {\n                const sameLaneX = this.findSameLaneX(xMajor, x, length), sameLaneY = this.findSameLaneY(xMajor, y, length);\n                const prevLaneX = this.findPrevLaneX(xMajor, x, length), prevLaneY = this.findPrevLaneY(xMajor, y, length);\n                const spaceInSameLane = this.maze.grid[sameLaneY][sameLaneX];\n                const spaceInPrevLane = this.findSpaceInPrevLane(prevLaneX, prevLaneY);\n                // 1st condition: check for perpendicular wall in same lane; 2nd: check for perpendicular wall\n                // in prev lane, but not for row because we don't care about prev lane when doing the outer\n                // check\n                if (!spaceInSameLane.isOpen(overlapCheckDirection) ||\n                    (!isFinalWall && spaceInPrevLane != null && !spaceInPrevLane.isOpen(overlapCheckDirection))) {\n                    // i += length puts i just past the wall that's blocked by a perpendicular one; -1 is needed\n                    // so that the next loop iter still checks that space after i++ happens\n                    additive = -1;\n                    break;\n                }\n            }\n        }\n        return new OrderedPair(length, additive);\n    }\n\n    private findNextSpace(xMajor: boolean, x: number, y: number, length: number): Space {\n        return this.maze.grid[xMajor ? y + length : y][xMajor ? x : x + length];\n    }\n\n    private findSameLaneX(xMajor: boolean, x: number, length: number): number {\n        return xMajor ? x : x + length - 1;\n    }\n\n    private findSameLaneY(xMajor: boolean, y: number, length: number): number {\n        return xMajor ? y + length - 1 : y;\n    }\n\n    private findPrevLaneX(xMajor: boolean, x: number, length: number): number {\n        return xMajor ? x - 1 : x + length - 1;\n    }\n\n    private findPrevLaneY(xMajor: boolean, y: number, length: number): number {\n        return xMajor ? y + length - 1 : y - 1;\n    }\n\n    private findSpaceInPrevLane(prevLaneX: number, prevLaneY: number): Space | null {\n        return this.maze.isInBounds(prevLaneX, prevLaneY) ? this.maze.grid[prevLaneY][prevLaneX] : null;\n    }\n\n    private createWallHelper(xMajor: boolean, isFinalWall: boolean, x: number, y: number, length: number): LwmWall {\n        let startX: number, startY: number, endX: number, endY: number;\n        if (xMajor) {\n            startY = y;\n            endY = y + length;\n            if (isFinalWall) {\n                startX = x + 1;\n                endX = x + 1;\n            } else {\n                startX = x;\n                endX = x;\n            }\n        } else {\n            startX = x;\n            endX = x + length;\n            if (isFinalWall) {\n                startY = y + 1;\n                endY = y + 1;\n            } else {\n                startY = y;\n                endY = y;\n            }\n        }\n        const start = new OrderedPair(startX, startY), end = new OrderedPair(endX, endY);\n        return new LwmWall(start, end);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/factories/linear-wall-model-generator.ts","import OrderedPair from \"app/common/ordered-pair\";\nimport LinearWallModel, { Wall as LwmWall } from \"app/models/linear-wall-model\";\nimport RectangularWallModel, { Wall as RwmWall } from \"app/models/rectangular-wall-model\";\nimport Direction from \"app/direction\";\n\n/**\n * An instance of RectangularWallModelGenerator can be used to create a {@link RectangularWallModel} from\n * a {@link LinearWallModel}\n * @author adashrod@gmail.com\n */\nexport default class RectangularWallModelGenerator {\n    private model: LinearWallModel;\n    private isWall: boolean[][] = [];\n\n    constructor(model: LinearWallModel) {\n        this.model = model;\n        const r = 2 * model.height + 1, c = 2 * model.width + 1;\n        for (let y = 0; y < r; y++) {\n            this.isWall.push([]);\n            for (let x = 0; x < c; x++) {\n                this.isWall[y].push(false);\n            }\n        }\n    }\n\n    generate(): RectangularWallModel {\n        const rectangularWallModel = new RectangularWallModel(this.isWall[0].length, this.isWall.length);\n\n        const verticalWalls: LwmWall[] = [], horizontalWalls: LwmWall[] = [];\n        for (const wall of this.model.walls) {\n            const wallDirection = Direction.determineDirection(wall.start, wall.end);\n            if (wallDirection === Direction.NORTH || wallDirection === Direction.WEST) {\n                throw new Error(\"wall direction should only be EAST or SOUTH (start-to-end should be left-to-right or top-to-bottom): \" +\n                    wall.toString());\n            }\n            const isVertical = wallDirection === Direction.SOUTH;\n            if (isVertical) {\n                verticalWalls.push(wall);\n            } else {\n                horizontalWalls.push(wall);\n            }\n        }\n        if (this.model.favorEwWalls) {\n            this.createWallSpacesFromLinearWalls(rectangularWallModel, horizontalWalls, false, true);\n            this.createWallSpacesFromLinearWalls(rectangularWallModel, verticalWalls, true, false);\n        } else {\n            this.createWallSpacesFromLinearWalls(rectangularWallModel, verticalWalls, true, true);\n            this.createWallSpacesFromLinearWalls(rectangularWallModel, horizontalWalls, false, false);\n        }\n\n        return rectangularWallModel;\n    }\n\n    private createWallSpacesFromLinearWalls(rectangularWallModel: RectangularWallModel, walls: LwmWall[], wallsAreVertical: boolean,\n            isFirstSetOfWalls: boolean): void {\n        const endDirection = wallsAreVertical ? Direction.SOUTH : Direction.EAST;\n        for (const wall of walls) {\n            let wsx = wall.start.x * 2, wex = wall.end.x * 2, wsy = wall.start.y * 2, wey = wall.end.y * 2;\n            if (!isFirstSetOfWalls) {\n                if (wallsAreVertical) {\n                    if (this.isWall[wsy][wsx]) { wsy++; }\n                    if (this.isWall[wey][wex]) { wey--; }\n                } else {\n                    if (this.isWall[wsy][wsx]) { wsx++; }\n                    if (this.isWall[wey][wex]) { wex--; }\n                }\n            }\n            const rectWall = new RwmWall(new OrderedPair(wsx, wsy),\n                new OrderedPair(wex, wey), endDirection);\n            rectangularWallModel.addWall(rectWall);\n            this.fillOutWallSpaces(wallsAreVertical, wsx, wsy, wex, wey);\n        }\n    }\n\n    fillOutWallSpaces(wallsAreVertical: boolean, wsx: number, wsy: number, wex: number, wey: number): void {\n        if (wallsAreVertical) {\n            for (let y = wsy; y <= wey; y++) {\n                this.isWall[y][wsx] = true;\n            }\n        } else {\n            for (let x = wsx; x <= wex; x++) {\n                this.isWall[wsy][x] = true;\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/factories/rectangular-wall-model-generator.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\nimport SheetWallTilingOptimizer from \"app/factories/sheet-wall-tiling-optimizer\";\nimport { min, HALF, ZERO } from \"app/misc/big-util\";\nimport Path from \"app/models/path\";\nimport RectangularWallModel, { Wall as RwmWall } from \"app/models/rectangular-wall-model\";\nimport Shape from \"app/models/shape\";\nimport SheetWallModel from \"app/models/sheet-wall-model\";\nimport VectorNumber from \"app/models/vector-number\";\nimport Direction from \"app/direction\";\n\nclass NotchPosInfo {\n    direction: Direction;\n    isCorner: boolean;\n\n    constructor(direction: Direction, isCorner: boolean) {\n        this.direction = direction;\n        this.isCorner = isCorner;\n    }\n}\n\nclass NotchConnection {\n    firstPoint: OrderedPair<Big>;\n    cornerPoint: OrderedPair<Big>;\n    secondPoint: OrderedPair<Big>;\n\n    constructor(firstPoint: OrderedPair<Big>, cornerPoint: OrderedPair<Big>, secondPoint: OrderedPair<Big>) {\n        this.firstPoint = firstPoint;\n        this.cornerPoint = cornerPoint;\n        this.secondPoint = secondPoint;\n    }\n}\n\nexport default class SheetWallModelGenerator {\n    private static directionRank = createDirectionRankMap();\n\n    wallHeight: Big;\n    materialThickness: Big;\n    hallWidth: Big;\n    notchHeight: Big;\n    separationSpace: Big;\n    maxWidth: Big;\n    maxHeight: Big;\n    private notchEdgeMap: Map<Path, NotchPosInfo> = new Map(); // reference equality is ok because there won't be any duplicate keys\n                                    // (1-to-1 notches and notch metadata)\n    private model: RectangularWallModel;\n    private wallTypeLabelsByLength: Map<string, number> = new Map(); // reference equality won't work because this map is being used as a\n                                    // cache and keys are recalculated on every get; call toString() on them for cache hits\n\n    constructor(model: RectangularWallModel) {\n        this.model = model;\n    }\n\n    public generate(): SheetWallModel {\n        const sheetWallModel = new SheetWallModel();\n\n        // for now, all walls and the floor will be positioned at (0,0). They'll be translated and tiled on the\n        // print sheet later\n        const sortedWalls = this.model.walls.slice(0);\n        sortedWalls.sort((a: RwmWall, b: RwmWall) => a.length - b.length);\n        for (const wall of sortedWalls) {\n            const wallLength = this.createNotchesForWall(wall, sheetWallModel);\n            const wallPath = new Path()\n                .addPoint(new OrderedPair(ZERO, ZERO))\n                .addPoint(new OrderedPair(wallLength, ZERO))\n                .addPoint(new OrderedPair(wallLength, this.wallHeight.add(this.materialThickness)))\n                .addPoint(new OrderedPair(wallLength.sub(this.notchHeight), this.wallHeight.add(this.materialThickness)))\n                .addPoint(new OrderedPair(wallLength.sub(this.notchHeight), this.wallHeight))\n                .addPoint(new OrderedPair(this.notchHeight, this.wallHeight))\n                .addPoint(new OrderedPair(this.notchHeight, this.wallHeight.add(this.materialThickness)))\n                .addPoint(new OrderedPair(ZERO, this.wallHeight.add(this.materialThickness)));\n            const wallShape = new Shape(wallPath);\n            sheetWallModel.addShape(wallShape);\n            const wallTypeLabel = this.findWallTypeLabel(wallLength);\n            const vnHeight = this.wallHeight.mul(HALF),\n                vnWidth = vnHeight.mul(HALF).mul(this.numDigits(wallTypeLabel));\n            sheetWallModel.wallLabels.set(wallShape, new VectorNumber(wallTypeLabel, min(vnWidth, wallLength), vnHeight,\n                new OrderedPair(ZERO, ZERO))); // translate in optimizer\n        }\n        this.createOutline(sheetWallModel);\n        new SheetWallTilingOptimizer(sheetWallModel, this.separationSpace, this.maxWidth, this.maxHeight, this.wallHeight).optimize();\n        return sheetWallModel;\n    }\n\n    /**\n     * given an index of a grid cell, calculates the physical distance to the start (left or top) of that cell from the\n     * beginning of the floor\n     * @param index   the grid index of the start/end cap of the wall\n     * @return the left x displacement of the notch for horizontal displacements or the top y displacement for vertical\n     * displacements\n     */\n    private calcDisplacement(index: number): Big {\n        const mtFactor = Math.floor((index + 1) / 2),\n            hwFactor = Math.floor(index / 2);\n        return this.materialThickness.mul(mtFactor).add(this.hallWidth.mul(hwFactor));\n    }\n\n    private createNotchesForWall(wall: RwmWall, sheetWallModel: SheetWallModel): Big {\n        // notches in the floor for the wall tabs to fit into\n        const firstNotch = new Path(), secondNotch = new Path();\n        let wallLength: Big;\n        let vectorNumber: VectorNumber;\n        if (wall.wallDirection === Direction.EAST) {\n            wallLength = this.calcDisplacement(wall.end.x + 1).sub(this.calcDisplacement(wall.start.x));\n            const wallTypeLabel = this.findWallTypeLabel(wallLength);\n            const startDisplacementX = this.calcDisplacement(wall.start.x),\n                endDisplacementX = this.calcDisplacement(wall.end.x + 1).sub(this.notchHeight),\n                displacementY = this.calcDisplacement(wall.start.y);\n            const spaceBetweenNotches = endDisplacementX.sub(startDisplacementX).sub(this.notchHeight);\n            let vnWidth = this.materialThickness.mul(HALF).mul(this.numDigits(wallTypeLabel));\n            vnWidth = min(vnWidth, spaceBetweenNotches);\n            vectorNumber = new VectorNumber(wallTypeLabel, vnWidth, this.materialThickness, new OrderedPair(\n                startDisplacementX.add(this.notchHeight).add(spaceBetweenNotches.mul(HALF)).sub(vnWidth.mul(HALF)), displacementY));\n            sheetWallModel.floorNumbers.push(vectorNumber);\n            firstNotch.addPoint(new OrderedPair(startDisplacementX, displacementY))\n                .addPoint(new OrderedPair(startDisplacementX.add(this.notchHeight), displacementY))\n                .addPoint(new OrderedPair(startDisplacementX.add(this.notchHeight), displacementY.add(this.materialThickness)))\n                .addPoint(new OrderedPair(startDisplacementX, displacementY.add(this.materialThickness)));\n            secondNotch.addPoint(new OrderedPair(endDisplacementX, displacementY))\n                .addPoint(new OrderedPair(endDisplacementX.add(this.notchHeight), displacementY))\n                .addPoint(new OrderedPair(endDisplacementX.add(this.notchHeight), displacementY.add(this.materialThickness)))\n                .addPoint(new OrderedPair(endDisplacementX, displacementY.add(this.materialThickness)));\n        } else {\n            wallLength = this.calcDisplacement(wall.end.y + 1).sub(this.calcDisplacement(wall.start.y));\n            const wallTypeLabel = this.findWallTypeLabel(wallLength);\n            const startDisplacementY = this.calcDisplacement(wall.start.y),\n                endDisplacementY = this.calcDisplacement(wall.end.y + 1).sub(this.notchHeight),\n                displacementX = this.calcDisplacement(wall.start.x);\n            const spaceBetweenNotches = endDisplacementY.sub(startDisplacementY).sub(this.notchHeight);\n            let vnWidth = this.materialThickness.mul(HALF).mul(this.numDigits(wallTypeLabel));\n            vnWidth = min(vnWidth, this.materialThickness);\n            vectorNumber = new VectorNumber(wallTypeLabel, vnWidth, this.materialThickness,\n                    new OrderedPair(displacementX.add(this.materialThickness.mul(HALF)).sub(vnWidth.mul(HALF)),\n                startDisplacementY.add(this.notchHeight).add(spaceBetweenNotches.mul(HALF)).sub(this.materialThickness.mul(HALF))));\n            sheetWallModel.floorNumbers.push(vectorNumber);\n            firstNotch.addPoint(new OrderedPair(displacementX, startDisplacementY))\n                .addPoint(new OrderedPair(displacementX.add(this.materialThickness), startDisplacementY))\n                .addPoint(new OrderedPair(displacementX.add(this.materialThickness), startDisplacementY.add(this.notchHeight)))\n                .addPoint(new OrderedPair(displacementX, startDisplacementY.add(this.notchHeight)));\n            secondNotch.addPoint(new OrderedPair(displacementX, endDisplacementY))\n                .addPoint(new OrderedPair(displacementX.add(this.materialThickness), endDisplacementY))\n                .addPoint(new OrderedPair(displacementX.add(this.materialThickness), endDisplacementY.add(this.notchHeight)))\n                .addPoint(new OrderedPair(displacementX, endDisplacementY.add(this.notchHeight)));\n        }\n        this.addNotchToEdgeMap(wall.start, firstNotch);\n        this.addNotchToEdgeMap(wall.end, secondNotch);\n        sheetWallModel.floorNotches.addPath(firstNotch).addPath(secondNotch);\n        return wallLength;\n    }\n    /**\n     * Each notch that touches the edge of the floor is kept in notchEdgeMap to keep track of which edge it's touching.\n     * For notches that are on corner squares, they are only considered part of one edge; it is the edge that is further\n     * clockwise.\n     * @param wallEndCapCoords the grid-based coordinates of the notch\n     * @param notch            the Path object for the notch\n     */\n    private addNotchToEdgeMap(wallEndCapCoords: OrderedPair<number>, notch: Path): void {\n        const lastRow = this.model.height - 1, lastCol = this.model.width - 1;\n        if (wallEndCapCoords.y === 0 && wallEndCapCoords.x !== lastCol) {\n            this.notchEdgeMap.set(notch, new NotchPosInfo(Direction.NORTH, wallEndCapCoords.x === 0));\n        } else if (wallEndCapCoords.x === lastCol && wallEndCapCoords.y !== lastRow) {\n            this.notchEdgeMap.set(notch, new NotchPosInfo(Direction.EAST, wallEndCapCoords.y === 0));\n        } else if (wallEndCapCoords.y === lastRow && wallEndCapCoords.x !== 0) {\n            this.notchEdgeMap.set(notch, new NotchPosInfo(Direction.SOUTH, wallEndCapCoords.x === lastCol));\n        } else if (wallEndCapCoords.x === 0 && wallEndCapCoords.y !== 0) {\n            this.notchEdgeMap.set(notch, new NotchPosInfo(Direction.WEST, wallEndCapCoords.y === lastRow));\n        }\n    }\n\n    /**\n     * Iterates over the edge notches and creates paths connecting them to create the vaguely rectangular outline of the\n     * floor\n     * @param sheetWallModel model to add paths to\n     */\n    private createOutline(sheetWallModel: SheetWallModel): void {\n        const paths: Path[] = [];\n        const keyIter = this.notchEdgeMap.keys();\n        let kObj;\n        while (!(kObj = keyIter.next()).done) {\n            paths.push(kObj.value);\n        }\n        paths.sort(this.edgeNotchComparator);\n        for (let i = 0; i < paths.length; i++) {\n            const notch = paths[i];\n            const nextNotch = i < paths.length - 1 ? paths[i + 1] : paths[0];\n            const notchInfo = <NotchPosInfo>this.notchEdgeMap.get(notch), nextNotchInfo = <NotchPosInfo>this.notchEdgeMap.get(nextNotch);\n            if (notchInfo.direction === nextNotchInfo.direction || nextNotchInfo.isCorner) {\n                const points = this.findNotchConnectionPoints(notchInfo, notch, nextNotch, false);\n                const firstPoint = points.firstPoint, secondPoint = points.secondPoint;\n                if (!firstPoint.equals(secondPoint)) {\n                    sheetWallModel.floorOutline.addPath(new Path(firstPoint, secondPoint).setClosed(false));\n                } else {\n                    console.debug(\"skipping connecting floor outer path because it's length 0: \" + firstPoint.toString());\n                }\n            } else {\n                // notches are on different sides and neither is a corner (unusual case of both parts of a corner of the maze being open)\n                const points = this.findNotchConnectionPoints(notchInfo, notch, nextNotch, true);\n                sheetWallModel.floorOutline.addPath(new Path(points.firstPoint, points.cornerPoint).setClosed(false));\n                sheetWallModel.floorOutline.addPath(new Path(points.cornerPoint, points.secondPoint).setClosed(false));\n            }\n        }\n    }\n\n    private findNotchConnectionPoints(notchInfo: NotchPosInfo, notch: Path, nextNotch: Path, includeCorner: boolean): NotchConnection {\n        const nextNotchAdditive = includeCorner ? 1 : 0;\n        let firstPoint: OrderedPair<Big>, floorCornerPoint: OrderedPair<Big>, secondPoint: OrderedPair<Big>;\n        if (notchInfo.direction === Direction.NORTH) {\n            firstPoint = notch.points[1];\n            secondPoint = nextNotch.points[nextNotchAdditive];\n            floorCornerPoint = new OrderedPair(secondPoint.x, firstPoint.y);\n        } else if (notchInfo.direction === Direction.EAST) {\n            firstPoint = notch.points[2];\n            secondPoint = nextNotch.points[1 + nextNotchAdditive];\n            floorCornerPoint = new OrderedPair(firstPoint.x, secondPoint.y);\n        } else if (notchInfo.direction === Direction.SOUTH) {\n            firstPoint = notch.points[3];\n            secondPoint = nextNotch.points[2 + nextNotchAdditive];\n            floorCornerPoint = new OrderedPair(secondPoint.x, firstPoint.y);\n        } else if (notchInfo.direction === Direction.WEST) {\n            firstPoint = notch.points[0];\n            secondPoint = nextNotch.points[3 + nextNotchAdditive % 4];\n            floorCornerPoint = new OrderedPair(firstPoint.x, secondPoint.y);\n        } else {\n            throw new Error(\"notch is not in edge map, but is on edge\");\n        }\n        return new NotchConnection(firstPoint, floorCornerPoint, secondPoint);\n    }\n\n    private numDigits(number: number): number {\n        const n = number < 0 ? -1 * number : number;\n        let exp = 1;\n        let powerOfTen = 10;\n        while (true) {\n            if (n < powerOfTen) {\n                return exp;\n            }\n            powerOfTen *= 10;\n            exp++;\n        }\n    }\n\n    private findWallTypeLabel(wallLength: Big): number {\n        let label = this.wallTypeLabelsByLength.get(wallLength.toString());\n        if (typeof label !== \"undefined\") {\n            return label;\n        }\n        label = this.wallTypeLabelsByLength.size;\n        this.wallTypeLabelsByLength.set(wallLength.toString(), label);\n        return label;\n    }\n\n    /**\n     * sorts notches on the edge of the floor in a clockwise fashion: N,E,S,W so that the top left corner is the \"lowest\"\n     * and a notch directly below that is the highest\n     * e.g.\n     * 1234\n     * C  5\n     * B  6\n     * A987\n     */\n    private edgeNotchComparator = (p1: Path, p2: Path) => {\n        const p1Info = <NotchPosInfo>this.notchEdgeMap.get(p1), p2Info = <NotchPosInfo>this.notchEdgeMap.get(p2);\n        const p1Dir = p1Info.direction, p2Dir = p2Info.direction;\n        const dirCmp = SheetWallModelGenerator.directionRank[p1Dir.name] - SheetWallModelGenerator.directionRank[p2Dir.name];\n        if (dirCmp !== 0) {\n            return dirCmp;\n        }\n        // p1Dir === p2Dir\n        if (p1Dir === Direction.NORTH) {\n            return p1.points[0].x.cmp(p2.points[0].x);\n        } else if (p1Dir === Direction.EAST) {\n            return p1.points[0].y.cmp(p2.points[0].y);\n        } else if (p1Dir === Direction.SOUTH) {\n            return p2.points[0].x.cmp(p1.points[0].x);\n        } else if (p1Dir === Direction.WEST) {\n            return p2.points[0].y.cmp(p1.points[0].y);\n        } else {\n            throw new Error(\"notch is not in edge map, but is on edge\");\n        }\n    }\n}\n\nfunction createDirectionRankMap(): object {\n    const map = {};\n    map[Direction.NORTH.name] = 0;\n    map[Direction.EAST.name] = 1;\n    map[Direction.SOUTH.name] = 2;\n    map[Direction.WEST.name] = 3;\n    return map;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/factories/sheet-wall-model-generator.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\nimport { HALF, ZERO } from \"app/misc/big-util\";\nimport Shape from \"app/models/shape\";\nimport SheetWallModel from \"app/models/sheet-wall-model\";\n\n/**\n * This class has an optimization function that tiles the walls in the sheet so that they're\n * - tiled in a way that fits within the max width and max height\n * - tiled in a way that wastes a minimal amount of space\n * @author adashrod@gmail.com\n */\nexport default class SheetWallTilingOptimizer {\n    private sheetWallModel: SheetWallModel;\n    private separationSpace: Big;\n    private maxWidth: Big;\n    private maxHeight: Big;\n    private wallHeight: Big;\n    private cursor = new OrderedPair<Big>(ZERO, ZERO);\n    private beginningOfLineX: Big;\n    private currentMaxRowWidth: Big | null;\n\n    constructor(sheetWallModel: SheetWallModel, separationSpace: Big, maxWidth: Big, maxHeight: Big, wallHeight: Big) {\n        this.sheetWallModel = sheetWallModel;\n        this.separationSpace = separationSpace;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this.wallHeight = wallHeight;\n    }\n\n    // todo: could make this even more efficient by doing rows instead of columns after the first column\n    optimize(): void {\n        const floorWidth = this.sheetWallModel.floorOutline.width,\n            floorHeight = this.sheetWallModel.floorOutline.height,\n            wallHeight = this.sheetWallModel.walls[0].height;\n        this.cursor = new OrderedPair(ZERO, floorHeight);\n        const shapesDeque = this.sheetWallModel.walls.slice();\n        while (this.sheetWallModel.walls.length > 0) {\n            this.sheetWallModel.walls.pop();\n        }\n        shapesDeque.sort((s1: Shape, s2: Shape) => s2.width.cmp(s1.width));\n        this.beginningOfLineX = ZERO;\n        this.currentMaxRowWidth = floorWidth;\n        this.cursor.y = this.sheetWallModel.floorOutline.height.add(this.separationSpace);\n        while (shapesDeque.length > 0) {\n            if (this.fitsInNewRow(wallHeight)) {\n                // add to new row in current column\n                const longWall = <Shape>shapesDeque.shift();\n                if (this.currentMaxRowWidth !== null && longWall.width.gt(this.currentMaxRowWidth)) {\n                    // simple fix for potential tiling overlap when numRows > numCols, not ideal because it wastes a bit of material space\n                    this.currentMaxRowWidth = longWall.width;\n                }\n                this.addToCurrentRow(longWall);\n                // so that we don't overwrite cmrw when it's already been set to the floor width on the first iteration\n                if (this.currentMaxRowWidth == null) {\n                    this.currentMaxRowWidth = longWall.width;\n                }\n            } else {\n                // end of column reached, move right to new column\n                this.cursor = new OrderedPair(this.cursor.x.add(this.currentMaxRowWidth || 0).add(this.separationSpace), ZERO);\n                this.beginningOfLineX = this.cursor.x;\n                this.currentMaxRowWidth = null;\n                continue;\n            }\n            while (shapesDeque.length > 0) {\n                const shortWall = shapesDeque[shapesDeque.length - 1];\n                if (this.fitsInCurrentRow(shortWall)) {\n                    this.addToCurrentRow(<Shape>shapesDeque.pop());\n                } else {\n                    this.cursor = new OrderedPair(this.beginningOfLineX, this.cursor.y.add(wallHeight).add(this.separationSpace));\n                    break;\n                }\n            }\n        }\n    }\n\n    private addToCurrentRow(wall: Shape): void {\n        wall.translate(this.cursor);\n        const wallLabel = this.sheetWallModel.wallLabels.get(wall);\n        if (typeof wallLabel === \"undefined\") {\n            throw new Error(`You forgot to add a shape to the wallLabels map: ${wall.toString()}`);\n        }\n        wallLabel.translate(new OrderedPair(\n            this.cursor.x.add(wall.width.mul(HALF)).sub(wallLabel.width.mul(HALF)),\n            this.cursor.y.add(this.wallHeight.mul(HALF)).sub(wallLabel.height.mul(HALF))\n        ));\n        this.sheetWallModel.walls.push(wall);\n        this.cursor.x = this.cursor.x.add(wall.width.add(this.separationSpace));\n        if (this.cursor.x.gt(this.maxWidth)) {\n            this.sheetWallModel.outOfBounds = true;\n        }\n    }\n\n    private fitsInNewRow(wallHeight: Big): boolean {\n        return this.cursor.y.add(wallHeight).lte(this.maxHeight);\n    }\n\n    private fitsInCurrentRow(wall: Shape): boolean {\n        if (this.currentMaxRowWidth === null) {\n            throw new Error(\"you shouldn't call fitsInCurrentRow when currentMaxRowWidth is null\");\n        }\n        return this.cursor.x.sub(this.beginningOfLineX).add(wall.width).lte(this.currentMaxRowWidth);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/factories/sheet-wall-tiling-optimizer.ts","module.exports = \".container {\\n    position: relative;\\n}\\n\\n.fade-slide {\\n    -webkit-animation: fade-in 500ms, slide 500ms;\\n            animation: fade-in 500ms, slide 500ms;\\n}\\n\\n.fade-slide-pop-left {\\n    -webkit-animation: fade-in 500ms, slide-pop-left 500ms;\\n            animation: fade-in 500ms, slide-pop-left 500ms;\\n}\\n\\n.glow {\\n    -webkit-animation: 750ms glow 1s 3;\\n            animation: 750ms glow 1s 3;\\n}\\n\\n.toggle-button, .close {\\n    cursor: pointer;\\n}\\n\\n.close {\\n    position: absolute;\\n    top: 5px;\\n    right: 5px;\\n}\\n\\n.modal {\\n    -webkit-box-shadow: 2px 2px 5px 5px rgba(64, 80, 96, .25);\\n            box-shadow: 2px 2px 5px 5px rgba(64, 80, 96, .25);\\n    position: absolute;\\n    left: 0;\\n    padding: 5px;\\n    background: #f3e0dc;\\n    color: #bc4639;\\n    width: 300px;\\n    z-index: 1;\\n}\\n\\n.modal.pop-left {\\n    left: auto;\\n    right: 0;\\n}\\n\\n:host /deep/ .title {\\n    font-style: italic;\\n}\\n\\n:host /deep/ .body {\\n    max-height: 400px;\\n    overflow-y: auto;\\n}\\n\\n:host /deep/ .title, :host /deep/ .body {\\n    text-align: left;\\n}\\n\\n@-webkit-keyframes glow {\\n    0% {\\n        color: #000;\\n        background-color: #fff;\\n    }\\n    50% {\\n        color: #888;\\n        background-color: #0ff;\\n    }\\n    100% {\\n        color: #000;\\n        background-color: #fff;\\n    }\\n}\\n\\n@keyframes glow {\\n    0% {\\n        color: #000;\\n        background-color: #fff;\\n    }\\n    50% {\\n        color: #888;\\n        background-color: #0ff;\\n    }\\n    100% {\\n        color: #000;\\n        background-color: #fff;\\n    }\\n}\\n\\n@-webkit-keyframes fade-in {\\n    0% { opacity: 0.0; }\\n    100% { opacity: 1.0; }\\n}\\n\\n@keyframes fade-in {\\n    0% { opacity: 0.0; }\\n    100% { opacity: 1.0; }\\n}\\n\\n@-webkit-keyframes slide {\\n    0% { left: 10px; }\\n    100% { left: 0; }\\n}\\n\\n@keyframes slide {\\n    0% { left: 10px; }\\n    100% { left: 0; }\\n}\\n\\n@-webkit-keyframes slide-pop-left {\\n    0% { right: -10px; }\\n    100% { right: 0; }\\n}\\n\\n@keyframes slide-pop-left {\\n    0% { right: -10px; }\\n    100% { right: 0; }\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/help-modal/help-modal.component.css\n// module id = ./src/app/help-modal/help-modal.component.css\n// module chunks = main","module.exports = \"<span class=\\\"container\\\">\\n    <span (click)=\\\"toggle()\\\" class=\\\"toggle-button\\\" [ngClass]=\\\"{'glow': glow}\\\">[?]</span>\\n    <div *ngIf=\\\"showHelpModal\\\" class=\\\"modal\\\" [ngClass]=\\\"{'pop-left': popLeft, 'fade-slide': !popLeft, 'fade-slide-pop-left': popLeft}\\\">\\n        <span class=\\\"close\\\" (click)=\\\"close()\\\">&times;</span>\\n        <ng-content select=\\\".title\\\"></ng-content>\\n        <ng-content select=\\\".body\\\"></ng-content>\\n    </div>\\n</span>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/help-modal/help-modal.component.html\n// module id = ./src/app/help-modal/help-modal.component.html\n// module chunks = main","import { Component, Input, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: \"app-help-modal\",\n    templateUrl: \"./help-modal.component.html\",\n    styleUrls: [\"./help-modal.component.css\"]\n})\nexport class HelpModalComponent implements OnInit {\n    private static instances: HelpModalComponent[] = [];\n\n    showHelpModal: boolean = false;\n    @Input() popLeft: boolean;\n    @Input() glow: boolean;\n\n    constructor() {}\n\n    ngOnInit() {\n        HelpModalComponent.instances.push(this);\n    }\n\n    toggle(): void {\n        for (const comp of HelpModalComponent.instances) {\n            if (comp !== this) {\n                comp.close();\n            }\n        }\n        this.showHelpModal = !this.showHelpModal;\n    }\n\n    close(): void {\n        this.showHelpModal = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/help-modal/help-modal.component.ts","module.exports = \".cut-intro, .numbering-text {\\n    max-width: 550px;\\n    margin: 0 20px 0;\\n}\\n\\n.right {\\n    float: right;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/help/help.component.css\n// module id = ./src/app/help/help.component.css\n// module chunks = main","module.exports = \"<p>You can click on any of the thumbnails in this page to see full-size versions.</p>\\n<div class=\\\"help-section\\\">\\n    <h1>Printing</h1>\\n    <div class=\\\"group\\\">\\n        <app-lightbox-thumbnail title=\\\"Example SVG\\\" image=\\\"LaserCutMazes/assets/blueprint.png\\\" thumbnailHeight=\\\"100\\\"></app-lightbox-thumbnail>\\n        <div class=\\\"cut-intro\\\">\\n            The different parts of the maze are grouped together and given different colors to facilitate printing (see example on left).\\n            The order that the groups are printed matters and an ideal order is:\\n        </div>\\n    </div>\\n    <ol>\\n        <li>score/engrave wall numbers and floor numbers (blue)</li>\\n        <li>cut walls and cut notches (black)</li>\\n        <li>cut floor outline (red)</li>\\n        <li>DO NOT cut, score, or engrave the calibration rectangle (green)</li>\\n        <li>DO NOT cut, score, or engrave the bounding box rectangle (purple)</li>\\n    </ol>\\n    <ul>\\n        <li>\\n            The numbers can be scored, or left out entirely. They're only there as a guide for assembly, though assembling a large maze without them could be\\n            tedious.\\n        </li>\\n        <li>\\n            The floor outline should be cut last. Since this is the cut that cuts the floor out of the material, cutting this before the notches could lead to\\n            the notch cuts being misaligned.\\n        </li>\\n        <li>\\n            The calibration rectangle serves as a guide for setting up the print job in your printer software and should not be cut, engraved, or scored at\\n            all. See the next section for more details.\\n        </li>\\n    </ul>\\n</div>\\n<div class=\\\"help-section\\\">\\n    <h1>Assembly</h1>\\n    <div class=\\\"group\\\">\\n        <app-lightbox-thumbnail title=\\\"Floor Notches\\\" image=\\\"LaserCutMazes/assets/notches.png\\\" thumbnailHeight=\\\"80\\\"></app-lightbox-thumbnail>\\n        <div class=\\\"numbering-text\\\">\\n            The floor piece has rectangular notches cut into it (left); the walls have stubs that fit into these notches (right).\\n            Each pair of notches has a number printed between them, and a wall piece that fits into those notches has the same number printed on it.\\n        </div>\\n        <app-lightbox-thumbnail class=\\\"right\\\" title=\\\"Numbered Wall Pieces\\\" image=\\\"LaserCutMazes/assets/wallPieces.png\\\" thumbnailHeight=\\\"80\\\"></app-lightbox-thumbnail>\\n    </div>\\n    <p>\\n        If the pieces fit somewhat snugly, you might only need to glue the walls along the outer edge to the floor. If they fit very tightly, you might not need\\n        to glue them at all.\\n    </p>\\n</div>\\n<div class=\\\"help-section\\\">\\n    <h1>Out of Bounds</h1>\\n    <p>\\n        If the maze is too big, the pieces won't fit in a single printing area, and you'll get the out-of-bounds warning when the SVG is generated.\\n        The tool currently doesn't break up the blueprint into multiple SVGs in this case. One solution would be to change any of the maze dimensions to use\\n        less printing material; if that isn't preferred, you'll need to manually edit the SVG in the SVG editor of your choice to split the print into two or\\n        more print jobs.\\n    </p>\\n    <p>\\n        When the out-of-bounds situation occurs, the printer's max width and max height values will be used to generate a rectangular bounding box in the SVG\\n        as a guide. It is displayed as a purple rectangle and anything outside of it will be outside of the printing area.\\n    </p>\\n</div>\\n<div class=\\\"help-section\\\">\\n    <h1>Calibration Rectangle</h1>\\n    <h3>A need for Calibration</h3>\\n    <div>\\n        <p>\\n            If your laser cutter software doesn't respect the pixel density settings (dots/pixels per inch, DPI, etc) then your image won't be the proper size,\\n            i.e. it will be scaled down or up. The problem with this is that scaling everything down makes the floor notches smaller, (and scaling up makes the\\n            floor notches bigger), but the material thickness doesn't change, so printing a scaled image would result in wall pieces that wouldn't fit in the\\n            notches. More specifically, the width of the notches has to be exactly the same size as the material thickness for the pieces to fit together, and\\n            scaling breaks that. See the following image for an example of this auto-scaling.\\n        </p>\\n        <app-lightbox-thumbnail title=\\\"Scaled Down\\\" image=\\\"LaserCutMazes/assets/improperScale.png\\\" thumbnailWidth=\\\"600\\\"></app-lightbox-thumbnail>\\n        <p>\\n            The above example maze was created with an 8-inch wide calibration rectangle (highlighted in green), but the image has been scaled down to about\\n            7.5 inches. In order to fix this, the entire image should be selected and scaled up (stretched) until the calibration rectangle is lined up with\\n            the 8-inch mark on the ruler.\\n        </p>\\n        <app-lightbox-thumbnail title=\\\"Corrected Scale\\\" image=\\\"LaserCutMazes/assets/correctedScale.png\\\" thumbnailWidth=\\\"600\\\"></app-lightbox-thumbnail>\\n        <p>\\n            In the second image, the entire blueprint has been scaled back up to make the calibration rectangle the correct size (8 inches wide here),\\n            ensuring that all pieces are the correct size.\\n        </p>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/help/help.component.html\n// module id = ./src/app/help/help.component.html\n// module chunks = main","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: \"app-help\",\n    templateUrl: \"./help.component.html\",\n    styleUrls: [\"./help.component.css\"]\n})\nexport class HelpComponent implements OnInit {\n\n    constructor() {}\n\n    ngOnInit() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/help/help.component.ts","module.exports = \".thumbnail {\\n    cursor: pointer;\\n}\\n\\n.modal {\\n    width: 100%;\\n    height: 100%;\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    background-color: rgba(32, 32, 32, .6);\\n}\\n\\n.lightbox, .title {\\n    text-align: center;\\n}\\n\\n.close {\\n    background: #5c2018;\\n    font-size: 48px;\\n    text-decoration: none;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    cursor: pointer;\\n    padding: 0 10px 0;\\n    border-radius: 15px;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/lightbox-thumbnail/lightbox-thumbnail.component.css\n// module id = ./src/app/lightbox-thumbnail/lightbox-thumbnail.component.css\n// module chunks = main","module.exports = \"<img #thumbnail class=\\\"thumbnail\\\" [src]=\\\"image\\\" (click)=\\\"showLightbox()\\\"/>\\n<div class=\\\"modal\\\" *ngIf=\\\"shown\\\" (click)=\\\"hideLightbox()\\\">\\n    <div class=\\\"lightbox\\\">\\n        <a class=\\\"close\\\" (click)=\\\"hideLightbox()\\\">&times;</a>\\n        <div class=\\\"title\\\">{{title}}</div>\\n        <img [src]=\\\"image\\\"/>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/lightbox-thumbnail/lightbox-thumbnail.component.html\n// module id = ./src/app/lightbox-thumbnail/lightbox-thumbnail.component.html\n// module chunks = main","import { Component, ElementRef, OnInit, Input, ViewChild } from \"@angular/core\";\n\n@Component({\n    selector: \"app-lightbox-thumbnail\",\n    templateUrl: \"./lightbox-thumbnail.component.html\",\n    styleUrls: [\"./lightbox-thumbnail.component.css\"]\n})\nexport class LightboxThumbnailComponent implements OnInit {\n    @Input() title: string;\n    @Input() image: string;\n    @Input() thumbnailWidth: number;\n    @Input() thumbnailHeight: number;\n    @ViewChild(\"thumbnail\") thumbnail: ElementRef;\n    shown: boolean = false;\n\n    constructor() {}\n\n    ngOnInit() {\n        this.thumbnail.nativeElement.onload = () => {\n            const aspectRatio = this.thumbnail.nativeElement.width / this.thumbnail.nativeElement.height;\n            if (this.thumbnailWidth) {\n                this.thumbnail.nativeElement.setAttribute(\"width\", this.thumbnailWidth);\n                this.thumbnail.nativeElement.setAttribute(\"height\", Math.round(this.thumbnailWidth / aspectRatio));\n            } else if (this.thumbnailHeight) {\n                this.thumbnail.nativeElement.setAttribute(\"width\", Math.round(this.thumbnailHeight * aspectRatio));\n                this.thumbnail.nativeElement.setAttribute(\"height\", this.thumbnailHeight);\n            }\n        };\n    }\n\n    showLightbox() {\n        this.shown = true;\n    }\n\n    hideLightbox() {\n        this.shown = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/lightbox-thumbnail/lightbox-thumbnail.component.ts","module.exports = \".conversions {\\n    margin-bottom: 5px;\\n}\\n\\n.section-title {\\n    text-align: center;\\n    margin: 2px 0;\\n}\\n\\n.inputs {\\n    width: 385px;\\n    border-width: 2px;\\n    border-style: outset;\\n    border-color: #f3e0dc #d4a59a #d4a59a #f3e0dc;\\n    padding: 5px;\\n    background: #d4a59a;\\n    color: #5c2018;\\n}\\n\\n.row {\\n    display: table-row;\\n}\\n\\n.row > span, .row > div {\\n    display: table-cell;\\n}\\n\\n.row > span {\\n    padding: 2px 5px;\\n}\\n\\n.row input, .row select, .row label {\\n    margin: 2px 5px;\\n}\\n\\n.row input[type=\\\"number\\\"], .row input[type=\\\"text\\\"] {\\n    width: 60px;\\n}\\n\\ntable.maze {\\n    border-collapse: collapse;\\n    background: #f3e0dc;\\n}\\n\\ntd {\\n    padding: 0;\\n    width: 25px;\\n    height: 25px;\\n    border: 2px solid rgba(0, 0, 0, 0);\\n}\\n\\n.northWall {\\n    border-top: 2px solid black;\\n}\\n\\n.eastWall {\\n    border-right: 2px solid black;\\n}\\n\\n.southWall {\\n    border-bottom: 2px solid black;\\n}\\n\\n.westWall {\\n    border-left: 2px solid black;\\n}\\n\\n.try-clicking {\\n    padding-left: 10px;\\n}\\n\\n.svg-preview {\\n    background: #d4a59a;\\n    overflow: scroll;\\n}\\n\\n.blueprint {\\n    width: 100%;\\n    height: 1000px;\\n}\\n\\n.out-of-bounds {\\n    background: #4285f4;\\n    border: 1px solid #5c2018;\\n    padding: 2px 5px;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/maze-builder/maze-builder.component.css\n// module id = ./src/app/maze-builder/maze-builder.component.css\n// module chunks = main","module.exports = \"<div>\\n    <p>To get started, enter some values for the maze dimensions (rows and columns). Once you do that the algorithm will automatically generate a maze.\\n        Choose your material measurements and you'll be ready to click \\\"Export SVG Blueprint\\\", which will let you download an SVG file to send to your\\n        laser cutter.\\n    </p>\\n    <p>Each input has a [?] help button with more information on what that input means.</p>\\n</div>\\n<div class=\\\"conversions\\\">\\n    <span>Some common measurements and conversions</span>\\n    <app-help-modal>\\n        <div class=\\\"title\\\">Common conversions</div>\\n        <div class=\\\"body\\\">\\n            <div class=\\\"conversion-table-title\\\">Material Thickness</div>\\n            <table>\\n                <thead>\\n                    <tr>\\n                        <th>Millimeters (mm)</th>\\n                        <th>Centimeters (cm)</th>\\n                        <th>Inches (in)</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr>\\n                        <td>1</td>\\n                        <td>.1</td>\\n                        <td>.039</td>\\n                    </tr>\\n                    <tr>\\n                        <td>2</td>\\n                        <td>.2</td>\\n                        <td>.079</td>\\n                    </tr>\\n                    <tr>\\n                        <td>3</td>\\n                        <td>.3</td>\\n                        <td>.118</td>\\n                    </tr>\\n                    <tr>\\n                        <td>4</td>\\n                        <td>.4</td>\\n                        <td>.158</td>\\n                    </tr>\\n                    <tr>\\n                        <td>5</td>\\n                        <td>.5</td>\\n                        <td>.197</td>\\n                    </tr>\\n                    <tr>\\n                        <td>3.18</td>\\n                        <td>.318</td>\\n                        <td>1/8</td>\\n                    </tr>\\n                    <tr>\\n                        <td>6.35</td>\\n                        <td>.635</td>\\n                        <td>1/4</td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n            <div class=\\\"conversion-table-title\\\">Print Area Dimensions</div>\\n            <table>\\n                <thead>\\n                    <tr>\\n                        <th>Millimeters (mm)</th>\\n                        <th>Centimeters (cm)</th>\\n                        <th>Inches (in)</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr>\\n                        <td>279.4</td>\\n                        <td>27.94</td>\\n                        <td>11</td>\\n                    </tr>\\n                    <tr>\\n                        <td>304.8</td>\\n                        <td>30.48</td>\\n                        <td>12</td>\\n                    </tr>\\n                    <tr>\\n                        <td>495.3</td>\\n                        <td>49.53</td>\\n                        <td>19.5</td>\\n                    </tr>\\n                    <tr>\\n                        <td>508</td>\\n                        <td>50.8</td>\\n                        <td>20</td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </app-help-modal>\\n</div>\\n<form>\\n    <div class=\\\"group\\\">\\n        <div class=\\\"maze-inputs inputs\\\">\\n            <div class=\\\"section-title\\\">\\n                <span>Maze Configuration</span>\\n                <app-help-modal>\\n                    <div class=\\\"title\\\">Maze Configuration Parameters</div>\\n                    <div class=\\\"body\\\">These parameters determine the shape, structure and dimensions of the maze. Enter values for rows and columns to get started.</div>\\n                </app-help-modal>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"numRowsInput\\\">number of rows</label>\\n                <div>\\n                    <input id=\\\"numRowsInput\\\" [type]=\\\"numericInputType\\\" min=\\\"1\\\" step=\\\"1\\\" [(ngModel)]=\\\"mazeConfig.numRows\\\" name=\\\"numRowsInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">number of maze rows</div>\\n                        <div class=\\\"body\\\">Number of rows, aka height. This is the number of horizontal lanes in the maze (positive integers only).</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"numColsInput\\\">number of columns</label>\\n                <div>\\n                    <input id=\\\"numColsInput\\\" [type]=\\\"numericInputType\\\" min=\\\"1\\\" step=\\\"1\\\" [(ngModel)]=\\\"mazeConfig.numCols\\\" name=\\\"numColsInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">number of maze columns</div>\\n                        <div class=\\\"body\\\">Number of columns, aka width. This is the number of vertical lanes in the maze (positive integers only).</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"mazeUnitInput\\\">units</label>\\n                <div>\\n                    <select id=\\\"mazeUnitInput\\\" [(ngModel)]=\\\"mazeConfig.unit\\\" (change)=\\\"buildMaze()\\\" name=\\\"mazeUnitInput\\\">\\n                        <option *ngFor=\\\"let u of mazeUnits\\\" [ngValue]=\\\"u\\\">{{u.pluralName}}</option>\\n                    </select>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Maze Measurement Units</div>\\n                        <div class=\\\"body\\\">These are the units used for the measurements below.</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"wallHeightInput\\\">wall height</label>\\n                <div>\\n                    <input id=\\\"wallHeightInput\\\" [type]=\\\"numericInputType\\\" min=\\\".01\\\" step=\\\".25\\\" [(ngModel)]=\\\"mazeConfig.wallHeight\\\" (change)=\\\"buildMaze()\\\" name=\\\"wallHeightInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Wall Height</div>\\n                        <div class=\\\"body\\\">\\n                            The height of the walls from the floor of the maze. This should be tall enough so that a marble rolling through the maze won't bounce over the walls.\\n                            <img src=\\\"LaserCutMazes/assets/wallHeight.png\\\"/>\\n                        </div>\\n                    </app-help-modal>\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"materialThicknessInput\\\">material thickness</label>\\n                <div>\\n                    <input id=\\\"materialThicknessInput\\\" [type]=\\\"numericInputType\\\" min=\\\".01\\\" step=\\\".01\\\" [(ngModel)]=\\\"mazeConfig.materialThickness\\\" (change)=\\\"buildMaze()\\\" name=\\\"materialThicknessInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Material Thickness</div>\\n                        <div class=\\\"body\\\">\\n                            The thickness of the material being used to cut out the maze pieces. Note: this will also be the width of the walls once assembled.\\n                            <img src=\\\"LaserCutMazes/assets/materialThickness.png\\\"/>\\n                        </div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"hallWidthInput\\\">hall width</label>\\n                <div>\\n                    <input id=\\\"hallWidthInput\\\" [type]=\\\"numericInputType\\\" min=\\\".1\\\" step=\\\".1\\\" [(ngModel)]=\\\"mazeConfig.hallWidth\\\" (change)=\\\"buildMaze()\\\" name=\\\"hallWidthInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Hall width</div>\\n                        <div class=\\\"body\\\">\\n                            Hall width, or space between walls. This should be at least as big as the diameter of a marble that would be rolling through the maze.\\n                            <img src=\\\"LaserCutMazes/assets/hallWidth.png\\\"/>\\n                        </div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"separationSpaceInput\\\">separation space</label>\\n                <div>\\n                    <input id=\\\"separationSpaceInput\\\" [type]=\\\"numericInputType\\\" min=\\\"0\\\" step=\\\".01\\\" [(ngModel)]=\\\"mazeConfig.separationSpace\\\" (change)=\\\"buildMaze()\\\" name=\\\"separationSpaceInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Separation Space</div>\\n                        <div class=\\\"body\\\">\\n                            The minimum space between separate pieces on the blueprint for laser cutting. If set to 0, no material will be wasted between pieces, but if the kerf of the laser is high, the pieces might end up too narrow/short.\\n                            <img src=\\\"LaserCutMazes/assets/separationSpace.png\\\"/>\\n                        </div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"algorithmInput\\\">algorithm</label>\\n                <div>\\n                    <select id=\\\"algorithmInput\\\" [(ngModel)]=\\\"currentAlgorithm\\\" (change)=\\\"buildMaze()\\\" name=\\\"algorithmInput\\\">\\n                        <option *ngFor=\\\"let a of algorithms\\\" [ngValue]=\\\"a\\\">{{a.name}}</option>\\n                    </select>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Maze Generation Algorithm</div>\\n                        <div class=\\\"body\\\">\\n                            <span>This is the algorithm that is used to randomly generate the maze.</span>\\n                            <dl>\\n                                <dt>Prim's Algorithm</dt>\\n                                <dd>Method: start with all spaces having all walls closed. Randomly pick a space and add it to the maze path. Add all of its neighboring spaces to a list. While there are spaces in the list, remove a random one, pick a random neighbor, connect the two (remove the wall), and add the removed space's unexplored neighbors to the list. Repeat until all spaces have been visited. <a href=\\\"https://en.wikipedia.org/wiki/Prim%27s_algorithm\\\" target=\\\"_blank\\\">Prim's Algorithm on Wikipedia</a></dd>\\n                                <dt>Kruskal's Algorithm</dt>\\n                                <dd>Method: start with all spaces having all walls closed. Go over every wall that separates two spaces (outer walls not included). Randomly pick a wall. If the two spaces separated by the wall are not already connected by a path, remove the wall between them. Repeat until all spaces are on the same path. <a href=\\\"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\\\" target=\\\"_blank\\\">Kruskal's Algorithm on Wikipedia</a></dd>\\n                                <dt>Depth-First Search</dt>\\n                                <dd>Method: start with all spaces having all walls closed. Randomly pick a space and add it to the maze path. Move in a random direction and add that to the path. Continue until a dead end is reached, then backtrack until reaching a space where a fork is possible and pick a new direction. Continue until all spaces have been visited. This method tends to make mazes with long paths, dead ends, and not a lot of forks. <a href=\\\"https://en.wikipedia.org/wiki/Depth-first_search\\\" target=\\\"_blank\\\">Depth-First Search Algorithm on Wikipedia</a></dd>\\n                                <dt>Do-It-Yourself</dt>\\n                                <dd>This \\\"algorithm\\\" does nothing. You start out with a maze with all walls closed and click on walls to toggle them on/off and design your own maze.</dd>\\n                            </dl>\\n                        </div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"randomSeedInput\\\">random seed</label>\\n                <div>\\n                    <input id=\\\"randomSeedInput\\\" type=\\\"text\\\" [(ngModel)]=\\\"randomSeed\\\" (change)=\\\"buildMaze()\\\" (keyup)=\\\"buildMaze()\\\" name=\\\"randomSeedInput\\\"/>\\n                    <app-help-modal>\\n                        <div class=\\\"title\\\">Random Seed</div>\\n                        <div class=\\\"body\\\">\\n                            <p>The random seed is where the random number generator \\\"starts\\\" generating random numbers. It can be any string of numbers/letters/etc. If you enter a random seed, then the randomly generated maze will always be the same randomly generated maze as long as you use that seed.</p>\\n                            <p>For example: if you use Prim's algorithm, enter a seed of \\\"rand12\\\", and choose 4 rows and 4 columns, you should see a maze that has a path from the top-left corner, to the top-right corner, to the bottom-right corner. You should be able to generate that same maze using the same row, column, and seed parameters at any time, in any browser, even if you refresh the page.</p>\\n                        </div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <span>last seed used:</span>\\n                <span>{{lastSeedUsed}}</span>\\n            </div>\\n        </div>\\n        <div class=\\\"printer-inputs inputs\\\">\\n            <div class=\\\"section-title\\\">\\n                <span>Printer Configuration</span>\\n                <app-help-modal [popLeft]=\\\"true\\\">\\n                    <div class=\\\"title\\\">Printer Configuration</div>\\n                    <div class=\\\"body\\\">These are configurations specific to the model of the printer that are needed by this tool.</div>\\n                </app-help-modal>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"maxPrinterUnits\\\">units</label>\\n                <div>\\n                    <select id=\\\"maxPrinterUnits\\\" [(ngModel)]=\\\"maxPrinterUnits\\\" (change)=\\\"buildMaze()\\\" name=\\\"maxPrinterUnits\\\">\\n                        <option *ngFor=\\\"let u of mazeUnits\\\" [ngValue]=\\\"u\\\">{{u.pluralName}}</option>\\n                    </select>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Printer Dimension Units</div>\\n                        <div class=\\\"body\\\">These are the units used for the measurements below.</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"printerPpu\\\">pixels per {{maxPrinterUnits.singularName}}</label>\\n                <div>\\n                    <input [type]=\\\"numericInputType\\\" min=\\\"1\\\" step=\\\"1\\\" [(ngModel)]=\\\"ppu\\\" (change)=\\\"buildMaze()\\\" name=\\\"printerPpu\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Pixels per Unit</div>\\n                        <div class=\\\"body\\\">\\n                            The number of pixels that the laser cutter interprets as being the length of the selected unit. E.g. Choosing inches and 96 would mean\\n                            96 pixels per inch, aka 96 dots per inch (DPI).\\n                        </div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"maxWidthInput\\\">max printer width</label>\\n                <div>\\n                    <input id=\\\"maxWidthInput\\\" [type]=\\\"numericInputType\\\" min=\\\"1\\\" [(ngModel)]=\\\"maxWidth\\\" (change)=\\\"buildMaze()\\\" name=\\\"maxWidthInput\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Max Printer Width</div>\\n                        <div class=\\\"body\\\">The width of the laser cutter's printable area</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"maxHeightInput\\\">max printer height</label>\\n                <div>\\n                    <input id=\\\"maxHeightInput\\\" [type]=\\\"numericInputType\\\" min=\\\"1\\\" [(ngModel)]=\\\"maxHeight\\\" (change)=\\\"buildMaze()\\\" name=\\\"maxHeightInput\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Max Printer Height</div>\\n                        <div class=\\\"body\\\">The height of the laser cutter's printable area</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"calibration-inputs inputs\\\">\\n            <div class=\\\"section-title\\\">\\n                <span>Calibration Rectangle Configuration</span>\\n                <app-help-modal [popLeft]=\\\"true\\\">\\n                    <div class=\\\"title\\\">Calibration Rectangle</div>\\n                    <div class=\\\"body\\\">\\n                        <p>All measurement inputs are used to calculate pixel-perfect-sized cutouts in the SVG, however some laser cutter software might scale images down or up. Since the pieces are interlocking, scaling the image will make them not fit together properly.</p>\\n                        <p>If your laser cutter software scales the image, you can use the calibration rectangle as a guide to restore the correct scale. For Example: if your laser cutter has a ruler on the edge of the canvas with inch measurements, you can create a calibration rectangle 6 inches wide and scale the image back up/down until the rectangle is 6 inches according to that ruler, then the pieces should be cut at the correct size.</p>\\n                        <p>IMPORTANT NOTE: Once you've used the rectangle to calibrate the scale, make sure not to cut or engrave it on the material.</p>\\n                    </div>\\n                </app-help-modal>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"includeCalibrationRectangleInput\\\">include in SVG</label>\\n                <div>\\n                    <input id=\\\"includeCalibrationRectangleInput\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"includeCalibrationRectangle\\\" (change)=\\\"buildMaze()\\\" name=\\\"includeCalibrationRectangleInput\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Include Calibration Rectangle</div>\\n                        <div class=\\\"body\\\">Check this box to include the calibration rectangle in the exported SVG.</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"calibrationRectangleUnitInput\\\">units</label>\\n                <div>\\n                    <select id=\\\"calibrationRectangleUnitInput\\\" [(ngModel)]=\\\"calibrationRectangleConfig.unit\\\" (change)=\\\"buildMaze()\\\" name=\\\"calibrationRectangleUnitInput\\\">\\n                        <option *ngFor=\\\"let u of rectangleUnits\\\" [ngValue]=\\\"u\\\">{{u.pluralName}}</option>\\n                    </select>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Calibration Rectangle Units</div>\\n                        <div class=\\\"body\\\">These are the units used for the measurements below.</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"calibrationRectangleWidthInput\\\">rectangle width</label>\\n                <div>\\n                    <input id=\\\"calibrationRectangleWidthInput\\\" [type]=\\\"numericInputType\\\" min=\\\"1\\\" step=\\\"1\\\" [(ngModel)]=\\\"calibrationRectangleConfig.width\\\" (change)=\\\"buildMaze()\\\" name=\\\"calibrationRectangleWidthInput\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Rectangle Width</div>\\n                        <div class=\\\"body\\\">The width of the rectangle in the specified units (positive integers only).</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <label for=\\\"calibrationRectangleHeightInput\\\">rectangle height</label>\\n                <div>\\n                    <input id=\\\"calibrationRectangleHeightInput\\\" [type]=\\\"numericInputType\\\" min=\\\"1\\\" step=\\\"1\\\" [(ngModel)]=\\\"calibrationRectangleConfig.height\\\" (change)=\\\"buildMaze()\\\" name=\\\"calibrationRectangleHeightInput\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Rectangle Height</div>\\n                        <div class=\\\"body\\\">The height of the rectangle in the specified units (positive integers only).</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <span>horizontal alignment</span>\\n                <div>\\n                    <label for=\\\"calibrationRectangleLeftInput\\\">left</label>\\n                    <input id=\\\"calibrationRectangleLeftInput\\\" type=\\\"radio\\\" [value]=\\\"true\\\" [(ngModel)]=\\\"calibrationRectangleConfig.leftAligned\\\" (change)=\\\"buildMaze()\\\" name=\\\"horizontalRadio\\\"/>\\n                    <label for=\\\"calibrationRectangleRightInput\\\">right</label>\\n                    <input id=\\\"calibrationRectangleRightInput\\\" type=\\\"radio\\\" [value]=\\\"false\\\" [(ngModel)]=\\\"calibrationRectangleConfig.leftAligned\\\" (change)=\\\"buildMaze()\\\" name=\\\"horizontalRadio\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Rectangle Horizontal Alignment</div>\\n                        <div class=\\\"body\\\">The rectangle can be aligned to the left or right side of the printing area.</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <span>vertical alignment</span>\\n                <div>\\n                    <label for=\\\"calibrationRectangleTopInput\\\">top</label>\\n                    <input id=\\\"calibrationRectangleTopInput\\\" type=\\\"radio\\\" [value]=\\\"true\\\" [(ngModel)]=\\\"calibrationRectangleConfig.topAligned\\\" (change)=\\\"buildMaze()\\\" name=\\\"verticalRadio\\\"/>\\n                    <label for=\\\"calibrationRectangleBottomInput\\\">bottom</label>\\n                    <input id=\\\"calibrationRectangleBottomInput\\\" type=\\\"radio\\\" [value]=\\\"false\\\" [(ngModel)]=\\\"calibrationRectangleConfig.topAligned\\\" (change)=\\\"buildMaze()\\\" name=\\\"verticalRadio\\\"/>\\n                    <app-help-modal [popLeft]=\\\"true\\\">\\n                        <div class=\\\"title\\\">Rectangle Vertical Alignment</div>\\n                        <div class=\\\"body\\\">The rectangle can be aligned to the top or bottom of the printing area.</div>\\n                    </app-help-modal>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <input type=\\\"button\\\" (click)=\\\"buildMaze()\\\" value=\\\"Regenerate\\\" [disabled]=\\\"!mazeConfig.numRows || !mazeConfig.numCols\\\"/>\\n    <app-help-modal>\\n        <div class=\\\"title\\\">Generate a New Random Maze</div>\\n        <div class=\\\"body\\\">The maze is automatically rebuilt when you change any of the inputs. You can use this to manually generate a different random maze, but only if you don't set a random seed.</div>\\n    </app-help-modal>\\n    <div *ngIf=\\\"maze\\\" class=\\\"group\\\">\\n        <table class=\\\"maze\\\">\\n            <tr *ngFor=\\\"let row of maze.grid; let r = index\\\">\\n                <td *ngFor=\\\"let elem of row; let c = index\\\" [ngClass]=\\\"{'northWall': !elem.northOpen, 'eastWall': !elem.eastOpen, 'southWall': !elem.southOpen, 'westWall': !elem.westOpen}\\\" (click)=\\\"onClickMazeCell($event, r, c)\\\"></td>\\n            </tr>\\n        </table>\\n        <div class=\\\"try-clicking\\\">&lt;- Try clicking on the walls of the maze to toggle them</div>\\n    </div>\\n    <input type=\\\"button\\\" (click)=\\\"exportSvg()\\\" value=\\\"Export SVG Blueprint\\\" [disabled]=\\\"!maze\\\"/>\\n    <app-help-modal>\\n        <div class=\\\"title\\\">Export Maze Design to an SVG Blueprint</div>\\n        <div class=\\\"body\\\">Once you've created a maze that you like with the above settings, click here to create the SVG file for download.</div>\\n    </app-help-modal>\\n    <label for=\\\"auto-svg\\\">Automatic SVG generation is {{autoGenerateSvg ? \\\"on\\\" : \\\"off\\\"}}</label><input id=\\\"auto-svg\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"autoGenerateSvg\\\" name=\\\"autoSvgCheckbox\\\"/>\\n</form>\\n<input type=\\\"button\\\" (click)=\\\"downloadSvg()\\\" value=\\\"Download\\\" [disabled]=\\\"!rawSvgSrc\\\"/>\\n<label for=\\\"svg-preview\\\">SVG preview is {{showSvgPreview ? \\\"on\\\" : \\\"off\\\"}}</label><input id=\\\"svg-preview\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"showSvgPreview\\\" name=\\\"svgPreviewCheckbox\\\"/>\\n<app-help-modal>\\n    <div class=\\\"title\\\">Toggle SVG Preview</div>\\n    <div class=\\\"body\\\">Click here to toggle the SVG preview. If an SVG has been generated, this will show the blueprint here in the page.</div>\\n</app-help-modal>\\n<span *ngIf=\\\"outOfBounds\\\">\\n    <span class=\\\"out-of-bounds\\\">Warning: SVG is out of bounds of print area</span>\\n    <app-help-modal [popLeft]=\\\"true\\\">\\n        <div class=\\\"title\\\">Out of Bounds</div>\\n        <div class=\\\"body\\\">\\n            The maze is big enough that the pieces don't fit within the printing area.\\n            See the help page for more info on what to do in this situation.\\n        </div>\\n    </app-help-modal>\\n</span>\\n<div class=\\\"svg-preview\\\" *ngIf=\\\"showSvgPreview\\\" [innerHTML]=\\\"safeSvgSrc || ''\\\"></div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/maze-builder/maze-builder.component.html\n// module id = ./src/app/maze-builder/maze-builder.component.html\n// module chunks = main","import { Component, OnInit } from \"@angular/core\";\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\nimport Big from \"big.js\";\nimport { saveAs } from \"file-saver\";\n\nimport DepthFirstSearch from \"app/algorithms/depth-first-search-algorithm\";\nimport EmptyAlgorithm from \"app/algorithms/empty-algorithm\";\nimport KruskalsAlgorithm from \"app/algorithms/kruskals-algorithm\";\nimport MazeGenerator from \"app/algorithms/maze-generator\";\nimport PrimsAlgorithm from \"app/algorithms/prims-algorithm\";\nimport OrderedPair from \"app/common/ordered-pair\";\nimport Unit from \"app/common/unit\";\nimport LinearWallModelGenerator from \"app/factories/linear-wall-model-generator\";\nimport RectangularWallModelGenerator from \"app/factories/rectangular-wall-model-generator\";\nimport SheetWallModelGenerator from \"app/factories/sheet-wall-model-generator\";\nimport { min } from \"app/misc/big-util\";\nimport CalibrationRectangle from \"app/models/calibration-rectangle\";\nimport Maze from \"app/models/maze\";\nimport MazeConfig from \"app/models/maze-config\";\nimport Direction from \"app/direction\";\nimport MazePrinter from \"app/maze-printer\";\n\n@Component({\n    selector: \"app-maze-builder\",\n    templateUrl: \"./maze-builder.component.html\",\n    styleUrls: [\"./maze-builder.component.css\"]\n})\nexport class MazeBuilderComponent implements OnInit {\n    static AUTO_SVG_THRESHOLD_MS = 500;\n    readonly mazeUnits: Unit[] = [Unit.INCHES, Unit.CENTIMETERS, Unit.MILLIMETERS];\n    readonly rectangleUnits: Unit[] = [Unit.INCHES, Unit.CENTIMETERS];\n\n    mazeConfig: MazeConfig = new MazeConfig();\n    randomSeed: string = \"\";\n    lastSeedUsed: string;\n\n    maxWidth: number = 19.5;\n    maxHeight: number = 11;\n    maxPrinterUnits = Unit.INCHES;\n    ppu: number = 96;\n\n    includeCalibrationRectangle: boolean = false;\n    calibrationRectangleConfig: CalibrationRectangle = new CalibrationRectangle();\n    algorithms: MazeGenerator[] = [new DepthFirstSearch(), new PrimsAlgorithm(), new KruskalsAlgorithm(), new EmptyAlgorithm()];\n    currentAlgorithm = this.algorithms[0];\n\n    maze: Maze | null;\n    rawSvgSrc: string;\n    safeSvgSrc: SafeHtml | null;\n    private _showSvgPreview: boolean = false;\n    autoGenerateSvg: boolean;\n    outOfBounds: boolean = false;\n\n    trackEvents: boolean = true;\n\n    get showSvgPreview(): boolean {\n        return this._showSvgPreview;\n    }\n\n    set showSvgPreview(show: boolean) {\n        this._showSvgPreview = show;\n        if (show) {\n            (<any>window).ga(\"send\", {\n                hitType: \"event\",\n                eventCategory: \"Designer\",\n                eventAction: \"showSvg\"\n            });\n        }\n    }\n\n    numericInputType: string = /msie\\s|trident\\/|edge\\//i.test((<any>window).navigator.userAgent) ? \"text\" : \"number\";\n\n    private consolidateConfigs(): string[][] {\n        const configs: string[][] = [];\n        const mc = this.mazeConfig;\n        configs.push([\"numMazeRows\", mc.numRows.toString()]);\n        configs.push([\"numMazeCols\", mc.numCols.toString()]);\n        configs.push([\"mazeUnits\", mc.unit.pluralName]);\n        configs.push([\"wallHeight\", mc.wallHeight.toString()]);\n        configs.push([\"materialThickness\", mc.materialThickness.toString()]);\n        configs.push([\"hallWidth\", mc.hallWidth.toString()]);\n        configs.push([\"separationSpace\", mc.separationSpace.toString()]);\n        configs.push([\"algorithm\", this.currentAlgorithm.name]);\n        configs.push([\"randomSeed\", this.lastSeedUsed]);\n        configs.push([\"printerConfigUnits\", this.maxPrinterUnits.pluralName]);\n        configs.push([\"printerConfigPixelsPerUnit\", this.ppu.toString()]);\n        configs.push([\"maxPrinterWidth\", this.maxWidth.toString()]);\n        configs.push([\"maxPrinterHeight\", this.maxHeight.toString()]);\n        configs.push([\"calibrationRectangle\", this.includeCalibrationRectangle ? \"yes\" : \"no\"]);\n        if (this.includeCalibrationRectangle) {\n            configs.push([\"calibrationRectangleUnits\", this.calibrationRectangleConfig.unit.pluralName]);\n            configs.push([\"calibrationRectangleWidth\", this.calibrationRectangleConfig.width.toString()]);\n            configs.push([\"calibrationRectangleHeight\", this.calibrationRectangleConfig.height.toString()]);\n            configs.push([\"calibrationRectangleHorizontal\", this.calibrationRectangleConfig.leftAligned ? \"left\" : \"right\"]);\n            configs.push([\"calibrationRectangleVertical\", this.calibrationRectangleConfig.topAligned ? \"top\" : \"bottom\"]);\n        }\n        return configs;\n    }\n\n    constructor(private sanitizer: DomSanitizer) {}\n\n    ngOnInit(): void {\n        this.mazeConfig.addChangeListener((oldVal, newVal) => {\n            this.buildMaze();\n        });\n        this.trackEvents = false;\n        this.autoGenerateSvg = this.benchmark() < MazeBuilderComponent.AUTO_SVG_THRESHOLD_MS;\n        this.trackEvents = true;\n    }\n\n    buildMaze() {\n        this.safeSvgSrc = null;\n        this.rawSvgSrc = \"\";\n        if (typeof this.mazeConfig.numRows !== \"number\" || typeof this.mazeConfig.numCols !== \"number\" ||\n                this.mazeConfig.numRows <= 0 || this.mazeConfig.numCols <= 0) {\n            return;\n        }\n        const start = new Date().getTime();\n        const maze = new Maze(this.mazeConfig.numCols, this.mazeConfig.numRows);\n        this.currentAlgorithm.seed = this.randomSeed.toString().length > 0 ? this.randomSeed : new Date().getTime();\n        this.lastSeedUsed = this.currentAlgorithm.seed.toString();\n        maze.build(this.currentAlgorithm);\n        console.log(`seed used: ${this.currentAlgorithm.seed}`);\n        this.maze = maze;\n        console.log(`maze build time: ${new Date().getTime() - start} ms`);\n        if (this.trackEvents) {\n            (<any>window).ga(\"send\", {\n                hitType: \"event\",\n                eventCategory: \"Designer\",\n                eventAction: \"build\",\n                eventLabel: this.currentAlgorithm.name\n            });\n        }\n        this.afterBuild();\n    }\n\n    private afterBuild(): void {\n        if (this.autoGenerateSvg) {\n            this.exportSvg();\n        }\n    }\n\n    onClickMazeCell(event: MouseEvent, row: number, column: number): void {\n        const elem = <HTMLElement>event.target;\n        const x = event.offsetX, y = event.offsetY;\n        const edge = this.getEdge(x / elem.offsetWidth, y / elem.offsetHeight);\n        if (edge !== null) {\n            if (this.maze === null) {\n                return;\n            }\n            const close = this.maze.grid[row][column].isOpen(edge);\n            const otherCellDelta = this.getAdjacentCellDelta(edge);\n            if (close) {\n                this.maze.grid[row][column].closeWall(edge);\n                if (this.maze.isInBounds(column + otherCellDelta.x, row + otherCellDelta.y)) {\n                    this.maze.grid[row + otherCellDelta.y][column + otherCellDelta.x].closeWall(edge.opposite);\n                }\n            } else {\n                this.maze.grid[row][column].openWall(edge);\n                if (this.maze.isInBounds(column + otherCellDelta.x, row + otherCellDelta.y)) {\n                    this.maze.grid[row + otherCellDelta.y][column + otherCellDelta.x].openWall(edge.opposite);\n                }\n            }\n            this.afterBuild();\n        }\n    }\n\n    private getAdjacentCellDelta(direction: Direction): OrderedPair<number> {\n        if (direction === Direction.NORTH) {\n            return new OrderedPair(0, -1);\n        } else if (direction === Direction.EAST) {\n            return new OrderedPair(1, 0);\n        } else if (direction === Direction.SOUTH) {\n            return new OrderedPair(0, 1);\n        } else if (direction === Direction.WEST) {\n            return new OrderedPair(-1, 0);\n        }\n        throw new Error(\"invalid direction\");\n    }\n\n    exportSvg() {\n        if (this.maze === null) {\n            return;\n        }\n        const multiplier = this.maxPrinterUnits.perInch.mul(this.ppu).div(this.mazeConfig.unit.perInch);\n        const start = new Date().getTime();\n        const linearWallModelGenerator = new LinearWallModelGenerator(this.maze);\n        const linearWallModel = linearWallModelGenerator.generate();\n        const rectangularWallModelGenerator = new RectangularWallModelGenerator(linearWallModel);\n        const rectangularWallModel = rectangularWallModelGenerator.generate();\n        const sheetWallModelGenerator = new SheetWallModelGenerator(rectangularWallModel);\n        sheetWallModelGenerator.hallWidth = new Big(this.mazeConfig.hallWidth).mul(multiplier);\n        sheetWallModelGenerator.materialThickness = new Big(this.mazeConfig.materialThickness).mul(multiplier);\n        sheetWallModelGenerator.maxHeight = new Big(this.maxHeight).mul(this.ppu);\n        sheetWallModelGenerator.maxWidth = new Big(this.maxWidth).mul(this.ppu);\n        sheetWallModelGenerator.notchHeight = min(this.maxPrinterUnits.perInch.mul(this.ppu).div(Unit.MILLIMETERS.perInch).mul(4),\n            new Big(this.mazeConfig.hallWidth).mul(multiplier).mul(\".33\"));\n        sheetWallModelGenerator.separationSpace = new Big(this.mazeConfig.separationSpace).mul(multiplier);\n        sheetWallModelGenerator.wallHeight = new Big(this.mazeConfig.wallHeight).mul(multiplier);\n        const sheetWallModel = sheetWallModelGenerator.generate();\n        const mazePrinter = new MazePrinter(sheetWallModel, new Big(this.maxWidth).mul(this.ppu),\n            new Big(this.maxHeight).mul(this.ppu), this.maxPrinterUnits, this.ppu);\n        if (this.includeCalibrationRectangle) {\n            this.rawSvgSrc = mazePrinter.printSvg(this.consolidateConfigs(), this.calibrationRectangleConfig);\n        } else {\n            this.rawSvgSrc = mazePrinter.printSvg(this.consolidateConfigs());\n        }\n        this.safeSvgSrc = this.sanitizer.bypassSecurityTrustHtml(this.rawSvgSrc);\n        this.outOfBounds = sheetWallModel.outOfBounds;\n        console.info(`svg export time: ${new Date().getTime() - start} ms`);\n        if (!this.autoGenerateSvg && this.trackEvents) {\n            (<any>window).ga(\"send\", {\n                hitType: \"event\",\n                eventCategory: \"Designer\",\n                eventAction: \"export\",\n                eventLabel: this.currentAlgorithm.name\n            });\n        }\n    }\n\n    downloadSvg() {\n        const blob = new Blob([this.rawSvgSrc], {type: \"image/svg+xml;charset=utf-8\"});\n        saveAs(blob, \"maze.svg\");\n        (<any>window).ga(\"send\", {\n            hitType: \"event\",\n            eventCategory: \"Designer\",\n            eventAction: \"download\",\n            eventLabel: this.currentAlgorithm.name\n        });\n    }\n\n    private benchmark(): number {\n        const start = new Date().getTime();\n        this.mazeConfig.numCols = 8;\n        this.mazeConfig.numRows = 8;\n        this.buildMaze();\n        this.exportSvg();\n        const end = new Date().getTime();\n        this.mazeConfig.numCols = 0;\n        this.mazeConfig.numRows = 0;\n        this.maze = null;\n        this.lastSeedUsed = \"\";\n        return end - start;\n    }\n\n    private getEdge(x: number, y: number): Direction | null {\n        const threshold = .3;\n        if (x < threshold) {\n            if (y < threshold) {\n                return Direction.NORTH;\n            } else if (y > 1 - threshold) {\n                return Direction.SOUTH;\n            }\n            return Direction.WEST;\n        } else if (x > 1 - threshold) {\n            if (y < threshold) {\n                return Direction.NORTH;\n            } else if (y > 1 - threshold) {\n                return Direction.SOUTH;\n            }\n            return Direction.EAST;\n        }\n        if (y < threshold) {\n            return Direction.NORTH;\n        }\n        if (y > 1 - threshold) {\n            return Direction.SOUTH;\n        }\n        return null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/maze-builder/maze-builder.component.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\nimport Unit from \"app/common/unit\";\nimport { ZERO } from \"app/misc/big-util\";\nimport SVG_HEADER from \"app/misc/svg-header\";\nimport CalibrationRectangle from \"app/models/calibration-rectangle\";\nimport SheetWallModel from \"app/models/sheet-wall-model\";\nimport VectorNumber from \"app/models/vector-number\";\nimport Path from \"app/svg/path\";\nimport SvgElementGenerator from \"app/svg/svg-element-generator\";\n\nexport default class MazePrinter {\n    private sheetWallModel: SheetWallModel;\n    private maxWidth: Big;\n    private maxHeight: Big;\n    private printerUnits: Unit;\n    private ppu: number;\n    precision: number = 5;\n\n    constructor(sheetWallModel: SheetWallModel, maxWidth: Big, maxHeight: Big, printerUnits: Unit, ppu: number) {\n        this.sheetWallModel = sheetWallModel;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this.printerUnits = printerUnits;\n        this.ppu = ppu;\n    }\n\n    /**\n     * Prints an SVG with shapes representing cut-out sections that will be the walls and floor of a maze\n     * @param configs              array of 2-tuple arrays, each containing a name and value\n     * @param calibrationRectangle optional configuration for a calibration rectangle to print in the SVG\n     */\n    printSvg(configs: string[][], calibrationRectangle?: CalibrationRectangle): string {\n        let result = SVG_HEADER;\n        result = result.replace(\"{width}\", this.sheetWallModel.maxHorizontalDisplacement.plus(5).toString())\n            .replace(\"{height}\", this.sheetWallModel.maxVerticalDisplacement.plus(5).toString());\n        result += this.createConfigComment(configs);\n        const svgElementGenerator = new SvgElementGenerator();\n\n        result += \"<g id=\\\"floor-notches\\\">\";\n        for (const notch of this.sheetWallModel.floorNotches.paths) {\n            const svgPath = svgElementGenerator.modelPathToSvgPath(notch);\n            result += svgElementGenerator.pathToSvgText(svgPath, this.precision);\n        }\n        result += \"</g>\\n\";\n\n        result += \"<g id=\\\"floor-numbers\\\">\";\n        for (const floorNumber of this.sheetWallModel.floorNumbers) {\n            result += svgElementGenerator.vectorNumberToSvgText(floorNumber, this.precision);\n        }\n        result += \"</g>\\n\";\n\n        result += \"<g id=\\\"wall-numbers\\\">\";\n        const wallLabelValues: VectorNumber[] = [];\n        const valIter = this.sheetWallModel.wallLabels.values();\n        let vObj;\n        while (!(vObj = valIter.next()).done) {\n            wallLabelValues.push(vObj.value);\n        }\n        for (const wallNumber of wallLabelValues) {\n            result += svgElementGenerator.vectorNumberToSvgText(wallNumber, this.precision);\n        }\n        result += \"</g>\\n\";\n\n        result += \"<g id=\\\"walls\\\">\";\n        for (const shape of this.sheetWallModel.walls) {\n            for (const wall of shape.paths) {\n                const svgPath = svgElementGenerator.modelPathToSvgPath(wall);\n                result += svgElementGenerator.pathToSvgText(svgPath, this.precision);\n            }\n        }\n        result += \"</g>\\n\";\n\n        result += \"<g id=\\\"floor-outline\\\">\";\n        for (const outlinePath of this.sheetWallModel.floorOutline.paths) {\n            const svgPath = svgElementGenerator.modelPathToSvgPath(outlinePath);\n            svgPath.style = svgPath.style.replace(\"#000000\", \"#ff0000\");\n            result += svgElementGenerator.pathToSvgText(svgPath, this.precision);\n        }\n        result += \"</g>\\n\";\n\n        if (calibrationRectangle != null) {\n            result += \"<g id=\\\"calibration-rectangle\\\">\";\n            for (const rectSide of this.buildCalibrationRectangle(calibrationRectangle)) {\n                rectSide.style = rectSide.style.replace(\"000000\", \"00ff00\");\n                result += svgElementGenerator.pathToSvgText(rectSide, this.precision);\n            }\n            result += \"</g>\\n\";\n        }\n\n        if (this.sheetWallModel.outOfBounds) {\n            result += \"<g id=\\\"bounding-box\\\">\";\n            for (const rectSide of this.buildBoundingBoxRectangle()) {\n                rectSide.style = rectSide.style.replace(\"000000\", \"ff00ff\");\n                result += svgElementGenerator.pathToSvgText(rectSide, this.precision);\n            }\n            result += \"</g>\\n\";\n        }\n\n        result += \"</svg>\\n\";\n        return result;\n    }\n\n    private createConfigComment(configs: string[][]): string {\n        let comment = `<!--\\n\\tGenerated by Laser-Cut Mazes http://adashrod.github.io/LaserCutMazes on ${new Date().toISOString()}\\n`;\n        for (const config of configs) {\n            comment += `\\t${config[0]}: ${config[1]}\\n`;\n        }\n        comment += \"-->\\n\";\n        return comment;\n    }\n\n    private buildCalibrationRectangle(calibrationRectangle: CalibrationRectangle): [Path, Path, Path, Path] {\n        const multiplier = this.printerUnits.perInch.mul(this.ppu).div(calibrationRectangle.unit.perInch),\n            width = multiplier.mul(calibrationRectangle.width),\n            height = multiplier.mul(calibrationRectangle.height);\n        const topLeft = new OrderedPair(ZERO, ZERO);\n        if (!calibrationRectangle.leftAligned) {\n            topLeft.x = this.maxWidth.sub(width);\n        }\n        if (!calibrationRectangle.topAligned) {\n            topLeft.y = this.maxHeight.sub(height);\n        }\n        const topRight = new OrderedPair(topLeft.x.add(width), topLeft.y),\n            bottomRight = new OrderedPair(topRight.x, topLeft.y.add(height)),\n            bottomLeft = new OrderedPair(topLeft.x, bottomRight.y);\n        const top = new Path(topLeft, topRight),\n            right = new Path(topRight, bottomRight),\n            bottom = new Path(bottomRight, bottomLeft),\n            left = new Path(bottomLeft, topLeft);\n        return [top, right, bottom, left];\n    }\n\n    private buildBoundingBoxRectangle(): [Path, Path, Path, Path] {\n        const top: Path = new Path(new OrderedPair<Big>(ZERO, ZERO), new OrderedPair<Big>(this.maxWidth, ZERO)),\n            right: Path = new Path(new OrderedPair<Big>(this.maxWidth, ZERO), new OrderedPair<Big>(this.maxWidth, this.maxHeight)),\n            bottom: Path = new Path(new OrderedPair<Big>(this.maxWidth, this.maxHeight), new OrderedPair<Big>(ZERO, this.maxHeight)),\n            left: Path = new Path(new OrderedPair<Big>(ZERO, this.maxHeight), new OrderedPair<Big>(ZERO, ZERO));\n        return [top, right, bottom, left];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/maze-printer.ts","import Big from \"big.js\";\n\nexport function min(a: Big, b: Big): Big {\n    return a.lt(b) ? a : b;\n}\n\nexport function max(a: Big, b: Big): Big {\n    return a.gt(b) ? a : b;\n}\n\nexport function roundAndStrip(num: Big, precision: number) {\n    const s = num.toFixed(precision);\n    const dot = s.indexOf(\".\");\n    if (dot === -1) {\n        return s;\n    }\n    let i;\n    for (i = s.length - 1; i >= 0; i--) {\n        if (s.charAt(i) !== \"0\") {\n            break;\n        }\n    }\n    if (s.charAt(i) === \".\") {\n        return s.substring(0, i);\n    }\n    return s.substring(0, i + 1);\n}\n\nexport const ZERO = new Big(0);\nexport const HALF = new Big(\".5\");\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/misc/big-util.ts","const SVG_HEADER = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg xmlns:svg=\"http://www.w3.org/2000/svg\"\n    xmlns=\"http://www.w3.org/2000/svg\" id=\"svg2\" version=\"1.1\"\n    width=\"{width}\" height=\"{height}\">\n<metadata id=\"metadata4933\"/>\n<defs id=\"defs4\"/>\n`;\n\nexport default SVG_HEADER;\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/misc/svg-header.ts","import Unit from \"app/common/unit\";\n\n/**\n * A model for a single rectangle with integral width and height values in inches or cm. This can be printed on an SVG\n * to help calibrate the scale of the SVG on printing software.\n * @author adashrod@gmail.com\n */\nexport default class CalibrationRectangle {\n    private _width: number = 6;\n    private _height: number = 6;\n    private _unit: Unit = Unit.INCHES;\n    leftAligned: boolean = true;\n    topAligned: boolean = true;\n\n    /**\n     * the integral number of units wide the rectangle is\n     */\n    get width(): number {\n        return this._width;\n    }\n\n    set width(w: number) {\n        let val: number;\n        if (typeof w === \"string\") {\n            val = parseInt(w, 10);\n        } else {\n            val = w;\n        }\n        this._width = Math.max(1, Math.floor(val));\n    }\n\n    /**\n     * the integral number of units high the rectangle is\n     */\n    get height(): number {\n        return this._height;\n    }\n\n    set height(h: number) {\n        let val: number;\n        if (typeof h === \"string\") {\n            val = parseInt(h, 10);\n        } else {\n            val = h;\n        }\n        this._height = Math.max(1, Math.floor(val));\n    }\n\n    get unit(): Unit {\n        return this._unit;\n    }\n\n    set unit(u: Unit) {\n        if (u === Unit.INCHES || u === Unit.CENTIMETERS) {\n            this._unit = u;\n        } else {\n            this._unit = Unit.INCHES;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/calibration-rectangle.ts","import OrderedPair from \"app/common/ordered-pair\";\nimport Direction from \"app/direction\";\n\nexport class Wall {\n    start: OrderedPair<number>;\n    end: OrderedPair<number>;\n\n    constructor(a: OrderedPair<number>, b: OrderedPair<number>) {\n        const direction = Direction.determineDirection(a, b);\n        if (direction === Direction.NORTH || direction === Direction.WEST) {\n            this.start = b;\n            this.end = a;\n        } else {\n            this.start = a;\n            this.end = b;\n        }\n    }\n\n    toString(): string {\n        return `Wall[${this.start.toString()} to ${this.end.toString()}]`;\n    }\n}\n\nexport default class LinearWallModel {\n    readonly width: number;\n    readonly height: number;\n    readonly walls: Wall[] = [];\n    readonly favorEwWalls: boolean;\n\n    constructor(width: number, height: number, favorEwWalls: boolean) {\n        this.width = width;\n        this.height = height;\n        this.favorEwWalls = favorEwWalls;\n    }\n\n    addWall(wall: Wall): void {\n        this.walls.push(wall);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/linear-wall-model.ts","import Unit from \"app/common/unit\";\n\n/**\n * a class for encapsulating all of the config needed for building a maze\n */\nexport default class MazeConfig {\n    private _numRows: number;\n    private _numCols: number;\n    unit: Unit = Unit.INCHES;\n    wallHeight: number = .5;\n    materialThickness: number = .118;\n    hallWidth: number = .5;\n    separationSpace: number = .05;\n    // algorithm: MazeGenerator;\n    private listeners: ((oldVal: any, newVal: any) => void)[] = [];\n\n    get numRows(): number {\n        return this._numRows;\n    }\n\n    set numRows(newVal: number) {\n        const oldVal = this.numRows;\n        if (typeof newVal === \"string\") {\n            this._numRows = parseInt(newVal, 10);\n        } else {\n            this._numRows = newVal;\n        }\n        if (oldVal !== newVal) {\n            for (const l of this.listeners) {\n                l(oldVal, newVal);\n            }\n        }\n    }\n\n    get numCols(): number {\n        return this._numCols;\n    }\n\n    set numCols(newVal: number) {\n        const oldVal = this.numCols;\n        if (typeof newVal === \"string\") {\n            this._numCols = parseInt(newVal, 10);\n        } else {\n            this._numCols = newVal;\n        }\n        if (oldVal !== newVal) {\n            for (const l of this.listeners) {\n                l(oldVal, newVal);\n            }\n        }\n    }\n\n    addChangeListener(listener: (oldVal: any, newVal: any) => void): void {\n        this.listeners.push(listener);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/maze-config.ts","import MazeGenerator from \"app/algorithms/maze-generator\";\nimport Space from \"app/models/space\";\n\n/**\n * This maze class is a representation of a maze based on a grid of squares. Each square knows about the four walls\n * surrounding it.\n * @author adashrod@gmail.com\n */\nexport default class Maze {\n    readonly numCols: number;\n    readonly numRows: number;\n    readonly grid: Space[][] = [];\n\n    constructor(numCols: number, numRows: number) {\n        this.numCols = numCols;\n        this.numRows = numRows;\n        this.grid = [];\n        this.initGrid();\n    }\n\n    private initGrid(): void {\n        for (let y = 0; y < this.numRows; y++) {\n            this.grid.push([]);\n            for (let x = 0; x < this.numCols; x++) {\n                this.grid[y].push(new Space());\n            }\n        }\n    }\n\n    private resetGrid(): void {\n        for (let y = 0; y < this.numRows; y++) {\n            for (let x = 0; x < this.numCols; x++) {\n                this.grid[y][x] = new Space();\n            }\n        }\n    }\n\n    /**\n     * check if a space determined by the coordinates is inside the maze boundary\n     */\n    isInBounds(x: number, y: number): boolean {\n        return x >= 0 && x < this.numCols && y >= 0 && y < this.numRows;\n    }\n\n    /**\n     * Randomizes this maze using the supplied algorithm\n     * @param generatorAlgorithm which algorithm to use\n     */\n    build(generatorAlgorithm: MazeGenerator): void {\n        this.resetGrid();\n        generatorAlgorithm.buildPaths(this);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/maze.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\n\nexport default class Path {\n    readonly points: OrderedPair<Big>[] = [];\n    isClosed: boolean = true;\n\n    /**\n     * if passed two arguments, creates an unclosed path from the first to the second\n     * otherwise creates a closed path with no points to start\n     * @param from start of path\n     * @param to end of path\n     */\n    constructor(from?: OrderedPair<Big>, to?: OrderedPair<Big>) {\n        if (typeof from !== \"undefined\" && typeof to !== \"undefined\") {\n            this.points.push(from);\n            this.points.push(to);\n            this.isClosed = false;\n        }\n    }\n\n    addPoint(point: OrderedPair<Big>): Path {\n        this.points.push(point);\n        return this;\n    }\n\n    setClosed(closed: boolean): Path {\n        this.isClosed = closed;\n        return this;\n    }\n\n    translate(delta: OrderedPair<Big>): Path {\n        for (const point of this.points) {\n            point.x = point.x.add(delta.x);\n            point.y = point.y.add(delta.y);\n        }\n        return this;\n    }\n\n    toString(): string {\n        let builder = \"\";\n        for (const point of this.points) {\n            builder += `(${point.x}, ${point.y}) -> `;\n        }\n        if (builder.length > 0) {\n            builder = builder.substring(0, builder.length - 4);\n        }\n        return builder;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/path.ts","import OrderedPair from \"app/common/ordered-pair\";\nimport Direction from \"app/direction\";\n\nexport default class RectangularWallModel {\n    readonly walls: Wall[] = [];\n    readonly width: number;\n    readonly height: number;\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n    }\n\n    addWall(wall: Wall): RectangularWallModel {\n        this.walls.push(wall);\n        return this;\n    }\n}\n\nexport class Wall {\n    readonly start: OrderedPair<number>;\n    readonly end: OrderedPair<number>;\n    readonly length: number;\n    readonly wallDirection: Direction;\n\n    constructor(start: OrderedPair<number>, end: OrderedPair<number>, wallDirection: Direction) {\n        this.start = start;\n        this.end = end;\n        this.length = Math.max(end.y - start.y + 1, end.x - start.x + 1);\n        this.wallDirection = wallDirection;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/rectangular-wall-model.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\nimport { ZERO } from \"app/misc/big-util\";\nimport Path from \"app/models/path\";\n\nexport default class Shape {\n    readonly paths: Path[] = [];\n    private cachedWidth: Big | null = null;\n    private cachedHeight: Big | null = null;\n\n    /**\n     * if passed one argument, creates a new shape with that one path\n     * if passed no arguments, creates an empty Shape\n     * @param path optional path\n     */\n    constructor(path?: Path) {\n        if (typeof path !== \"undefined\") {\n            this.paths.push(path);\n        }\n    }\n\n    static copy(shape: Shape): Shape {\n        const copy = new Shape();\n        for (const path of shape.paths) {\n            const pathCopy = new Path();\n            for (const point of path.points) {\n                pathCopy.addPoint(new OrderedPair(point.x, point.y));\n            }\n            pathCopy.setClosed(path.isClosed);\n            copy.addPath(pathCopy);\n        }\n        return copy;\n    }\n\n    addPath(path: Path): Shape {\n        this.paths.push(path);\n        this.cachedWidth = null;\n        this.cachedHeight = null;\n        return this;\n    }\n\n    addShape(shape: Shape): Shape {\n        Array.prototype.push.apply(this.paths, shape.paths);\n        this.cachedWidth = null;\n        this.cachedHeight = null;\n        return this;\n    }\n\n    get width(): Big {\n        if (this.cachedWidth !== null) {\n            return this.cachedWidth;\n        }\n        let minimum: Big | null = null, maximum: Big | null = null;\n        for (const path of this.paths) {\n            for (const point of path.points) {\n                if (minimum === null || point.x.lt(minimum)) {\n                    minimum = point.x;\n                }\n                if (maximum === null || point.x.gt(maximum)) {\n                    maximum = point.x;\n                }\n            }\n        }\n        if (maximum === null || minimum === null) {\n            return ZERO;\n        }\n        return maximum.sub(minimum);\n    }\n\n    get height(): Big {\n        if (this.cachedHeight !== null) {\n            return this.cachedHeight;\n        }\n        let minimum: Big | null = null, maximum: Big | null = null;\n        for (const path of this.paths) {\n            for (const point of path.points) {\n                if (minimum === null || point.y.lt(minimum)) {\n                    minimum = point.y;\n                }\n                if (maximum === null || point.y.gt(maximum)) {\n                    maximum = point.y;\n                }\n            }\n        }\n        if (maximum === null || minimum === null) {\n            return ZERO;\n        }\n        return maximum.sub(minimum);\n    }\n\n    get maxHorizontalDisplacement(): Big {\n        let maximum: Big | null = null;\n        for (const path of this.paths) {\n            for (const point of path.points) {\n                if (maximum === null || point.x.gt(maximum)) {\n                    maximum = point.x;\n                }\n            }\n        }\n        return maximum || ZERO;\n    }\n\n\n    get maxVerticalDisplacement(): Big {\n        let maximum: Big | null = null;\n        for (const path of this.paths) {\n            for (const point of path.points) {\n                if (maximum === null || point.y.gt(maximum)) {\n                    maximum = point.y;\n                }\n            }\n        }\n        return maximum || ZERO;\n    }\n\n    translate(delta: OrderedPair<Big>): Shape {\n        for (const path of this.paths) {\n            path.translate(delta);\n        }\n        return this;\n    }\n\n    /**\n     * for now, at least, this assumes that the object is positioned at 0,0. If that's not the case, this will also end\n     * up doing an unwanted translation\n     * @param scaleFactor\n     * @return\n     */\n    scale(scaleFactor: OrderedPair<Big>): Shape {\n        for (const path of this.paths) {\n            for (const point of path.points) {\n                point.x = point.x.mul(scaleFactor.x);\n                point.y = point.y.mul(scaleFactor.y);\n            }\n        }\n        return this;\n    }\n\n    toString(): string {\n        let result = \"Shape[\";\n        if (this.paths.length > 0) {\n            for (const p of this.paths) {\n                result += p.toString() + \", \";\n            }\n            result = result.substring(0, result.length - 2);\n        }\n        return result + \"]\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/shape.ts","import Big from \"big.js\";\n\nimport Shape from \"app/models/shape\";\nimport VectorNumber from \"app/models/vector-number\";\n\n/**\n * This model class is a model of the walls and floor that compose a maze with the intention that each piece (wall or\n * floor) is of a constant thickness (the thickness of the physical sheet that will be used) and the walls will be\n * rotated upward and attached to the floor.\n * @author adashrod@gmail.com\n */\nexport default class SheetWallModel {\n    readonly floorNotches: Shape = new Shape();\n    readonly floorOutline: Shape = new Shape();\n    readonly walls: Shape[] = [];\n    readonly floorNumbers: VectorNumber[] = [];\n    readonly wallLabels: Map<Shape, VectorNumber> = new Map();  // reference equality is ok because there won't be any duplicate keys\n                                                                // (1-to-1 walls and VectorNumbers)\n    outOfBounds: boolean;\n\n    addShape(shape: Shape): SheetWallModel {\n        this.walls.push(shape);\n        return this;\n    }\n\n    get maxHorizontalDisplacement(): Big {\n        let max = this.floorOutline.maxHorizontalDisplacement;\n        for (const wall of this.walls) {\n            if (wall.maxHorizontalDisplacement.gt(max)) {\n                max = wall.maxHorizontalDisplacement;\n            }\n        }\n        return max;\n    }\n\n    get maxVerticalDisplacement(): Big {\n        let max = this.floorOutline.maxVerticalDisplacement;\n        for (const wall of this.walls) {\n            if (wall.maxVerticalDisplacement.gt(max)) {\n                max = wall.maxVerticalDisplacement;\n            }\n        }\n        return max;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/sheet-wall-model.ts","import Direction from \"app/direction\";\n\n/**\n * A Space represents an element in a 2D array representation of a maze. It knows whether it has walls on any four sides.\n * @author adashrod@gmail.com\n */\nexport default class Space {\n    northOpen: boolean = false;\n    eastOpen: boolean = false;\n    southOpen: boolean = false;\n    westOpen: boolean = false;\n\n    /**\n     * Removes a wall in the space\n     * @param direction which wall to remove\n     */\n    openWall(direction: Direction): void {\n        this.changeWall(direction, true);\n    }\n\n    /**\n     * Adds a wall in the space\n     * @param direction which wall to add\n     */\n    closeWall(direction: Direction): void {\n        this.changeWall(direction, false);\n    }\n\n    private changeWall(direction: Direction, open: boolean) {\n        if (direction === Direction.NORTH) {\n            this.northOpen = open;\n        } else if (direction === Direction.EAST) {\n            this.eastOpen = open;\n        } else if (direction === Direction.SOUTH) {\n            this.southOpen = open;\n        } else if (direction === Direction.WEST) {\n            this.westOpen = open;\n        }\n    }\n\n    /**\n     * @param direction which direction to check for a wall\n     * @return true if the wall in the specified direction is open (no wall)\n     */\n    isOpen(direction: Direction): boolean {\n        switch (direction) {\n            case Direction.NORTH:\n                return this.northOpen;\n            case Direction.EAST:\n                return this.eastOpen;\n            case Direction.SOUTH:\n                return this.southOpen;\n            case Direction.WEST:\n                return this.westOpen;\n            default:\n                throw new Error(`invalid direction: ${direction}`);\n        }\n    }\n\n    toString(): string {\n        let str = \"Space[\";\n        if (this.northOpen) {\n            str += \"^\";\n        }\n        if (this.eastOpen) {\n            str += \">\";\n        }\n        if (this.southOpen) {\n            str += \"v\";\n        }\n        if (this.westOpen) {\n            str += \"<\";\n        }\n        return str + \"]\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/space.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\nimport Path from \"app/models/path\";\nimport Shape from \"app/models/shape\";\n\n/**\n * A VectorNumber is a model with a numeric value, and context of width, height, and position\n * @author adashrod@gmail.com\n */\nexport default class VectorNumber {\n    private static charMap = buildCharMap();\n\n    readonly number: number;\n    readonly width: Big;\n    readonly height: Big;\n    readonly position: OrderedPair<Big>;\n\n    constructor(number: number, width: Big, height: Big, position: OrderedPair<Big>) {\n        this.number = number;\n        this.width = width;\n        this.height = height;\n        this.position = position;\n    }\n\n    static characterToShape(c: string): Shape {\n        const shape = VectorNumber.charMap[c];\n        if (typeof shape !== \"undefined\") {\n            return Shape.copy(shape);\n        }\n        throw new Error(`\"${c}\" is not a valid character for VectorNumber`);\n    }\n\n    translate(delta: OrderedPair<Big>): VectorNumber {\n        this.position.x = this.position.x.add(delta.x);\n        this.position.y = this.position.y.add(delta.y);\n        return this;\n    }\n}\n\nfunction buildCharMap(): Object {\n    const map = {};\n    const zero = new Shape();\n    const one = new Shape();\n    const two = new Shape();\n    const three = new Shape();\n    const four = new Shape();\n    const five = new Shape();\n    const six = new Shape();\n    const seven = new Shape();\n    const eight = new Shape();\n    const nine = new Shape();\n    map[\"0\"] = zero;\n    map[\"1\"] = one;\n    map[\"2\"] = two;\n    map[\"3\"] = three;\n    map[\"4\"] = four;\n    map[\"5\"] = five;\n    map[\"6\"] = six;\n    map[\"7\"] = seven;\n    map[\"8\"] = eight;\n    map[\"9\"] = nine;\n    const zeroPath = new Path();\n    zeroPath.addPoint(new OrderedPair(new Big(5), new Big(3)))\n        .addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(2), new Big(1)))\n        .addPoint(new OrderedPair(new Big(1), new Big(3)))\n        .addPoint(new OrderedPair(new Big(1), new Big(7)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .addPoint(new OrderedPair(new Big(5), new Big(7)))\n        .setClosed(true);\n    zero.addPath(zeroPath);\n    const onePathMain = new Path(), onePathBase = new Path();\n    onePathMain.addPoint(new OrderedPair(new Big(2), new Big(2)))\n        .addPoint(new OrderedPair(new Big(3), new Big(1)))\n        .addPoint(new OrderedPair(new Big(3), new Big(9)))\n        .setClosed(false);\n    onePathBase.addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .setClosed(false);\n    one.addPath(onePathMain).addPath(onePathBase);\n    const twoPath = new Path();\n    twoPath.addPoint(new OrderedPair(new Big(1), new Big(2)))\n        .addPoint(new OrderedPair(new Big(2), new Big(1)))\n        .addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(5), new Big(2)))\n        .addPoint(new OrderedPair(new Big(5), new Big(4)))\n        .addPoint(new OrderedPair(new Big(1), new Big(9)))\n        .addPoint(new OrderedPair(new Big(5), new Big(9)))\n        .setClosed(false);\n    two.addPath(twoPath);\n    const threePathTop = new Path(), threePathBottom = new Path();\n    threePathTop.addPoint(new OrderedPair(new Big(1), new Big(2)))\n        .addPoint(new OrderedPair(new Big(2), new Big(1)))\n        .addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(5), new Big(2)))\n        .addPoint(new OrderedPair(new Big(5), new Big(4)))\n        .addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(2), new Big(5)))\n        .setClosed(false);\n    threePathBottom.addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(5), new Big(6)))\n        .addPoint(new OrderedPair(new Big(5), new Big(8)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(1), new Big(8)))\n        .setClosed(false);\n    three.addPath(threePathTop).addPath(threePathBottom);\n    const fourPathBent = new Path(), fourPathStem = new Path(new OrderedPair(new Big(4), new Big(1)),\n        new OrderedPair(new Big(4), new Big(9)));\n    fourPathBent.addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(1), new Big(5)))\n        .addPoint(new OrderedPair(new Big(5), new Big(5)))\n        .setClosed(false);\n    four.addPath(fourPathBent).addPath(fourPathStem);\n    const fivePath = new Path();\n    fivePath.addPoint(new OrderedPair(new Big(5), new Big(1)))\n        .addPoint(new OrderedPair(new Big(1), new Big(1)))\n        .addPoint(new OrderedPair(new Big(1), new Big(5)))\n        .addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(5), new Big(6)))\n        .addPoint(new OrderedPair(new Big(5), new Big(8)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(1), new Big(8)))\n        .setClosed(false);\n    five.addPath(fivePath);\n    const sixPath = new Path();\n    sixPath.addPoint(new OrderedPair(new Big(5), new Big(2)))\n        .addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(2), new Big(1)))\n        .addPoint(new OrderedPair(new Big(1), new Big(2)))\n        .addPoint(new OrderedPair(new Big(1), new Big(8)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .addPoint(new OrderedPair(new Big(5), new Big(8)))\n        .addPoint(new OrderedPair(new Big(5), new Big(6)))\n        .addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(2), new Big(5)))\n        .addPoint(new OrderedPair(new Big(1), new Big(6)))\n        .setClosed(false);\n    six.addPath(sixPath);\n    const sevenPath = new Path();\n    sevenPath.addPoint(new OrderedPair(new Big(1), new Big(1)))\n        .addPoint(new OrderedPair(new Big(5), new Big(1)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .setClosed(false);\n    seven.addPath(sevenPath);\n    const eightPathTop = new Path(), eightPathBottom = new Path();\n    eightPathTop.addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(5), new Big(4)))\n        .addPoint(new OrderedPair(new Big(5), new Big(2)))\n        .addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(2), new Big(1)))\n        .addPoint(new OrderedPair(new Big(1), new Big(2)))\n        .addPoint(new OrderedPair(new Big(1), new Big(4)))\n        .addPoint(new OrderedPair(new Big(2), new Big(5)))\n        .setClosed(true);\n    eightPathBottom.addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(5), new Big(6)))\n        .addPoint(new OrderedPair(new Big(5), new Big(8)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(1), new Big(8)))\n        .addPoint(new OrderedPair(new Big(1), new Big(6)))\n        .addPoint(new OrderedPair(new Big(2), new Big(5)))\n        .setClosed(false);\n    eight.addPath(eightPathTop).addPath(eightPathBottom);\n    const ninePath = new Path();\n    ninePath.addPoint(new OrderedPair(new Big(5), new Big(4)))\n        .addPoint(new OrderedPair(new Big(4), new Big(5)))\n        .addPoint(new OrderedPair(new Big(2), new Big(5)))\n        .addPoint(new OrderedPair(new Big(1), new Big(4)))\n        .addPoint(new OrderedPair(new Big(1), new Big(2)))\n        .addPoint(new OrderedPair(new Big(2), new Big(1)))\n        .addPoint(new OrderedPair(new Big(4), new Big(1)))\n        .addPoint(new OrderedPair(new Big(5), new Big(2)))\n        .addPoint(new OrderedPair(new Big(5), new Big(8)))\n        .addPoint(new OrderedPair(new Big(4), new Big(9)))\n        .addPoint(new OrderedPair(new Big(2), new Big(9)))\n        .addPoint(new OrderedPair(new Big(1), new Big(8)))\n        .setClosed(false);\n    nine.addPath(ninePath);\n    return map;\n}\n\nexport const CHARACTER_WIDTH = 6;\nexport const CHARACTER_HEIGHT = 10;\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/models/vector-number.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\n\n/**\n * An SVG <path/> element\n * @author adashrod@gmail.com\n */\nexport default class Path {\n    style = \"stroke:#000000;fill:none\";\n    start: OrderedPair<Big>;\n    end: OrderedPair<Big>;\n    id: string;\n    readonly multiPartPath: OrderedPair<Big>[] = [];\n\n    constructor(start?: OrderedPair<Big>, end?: OrderedPair<Big>) {\n        if (typeof start !== \"undefined\" && typeof end !== \"undefined\") {\n            this.start = start;\n            this.end = end;\n        }\n    }\n\n    toString(): string {\n        return `Path[(${this.start.x},${this.start.y}) -> (${this.end.x},${this.end.y}]`;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/svg/path.ts","import Big from \"big.js\";\n\nimport OrderedPair from \"app/common/ordered-pair\";\nimport { ZERO, roundAndStrip } from \"app/misc/big-util\";\nimport ModelPath from \"app/models/path\";\nimport Shape from \"app/models/shape\";\nimport VectorNumber, { CHARACTER_WIDTH, CHARACTER_HEIGHT } from \"app/models/vector-number\";\nimport SvgPath from \"app/svg/path\";\nimport Rect from \"app/svg/rect\";\n\n/**\n * A simple, not very flexible utility for serializing SVG elements to strings for manual SVG file construction.\n * To be replaced by an SVG library later.\n * @author adashrod@gmail.com\n */\nexport default class SvgElementGenerator {\n    modelPathToSvgPath(path: ModelPath): SvgPath {\n        const result = new SvgPath();\n        Array.prototype.push.apply(result.multiPartPath, path.points);\n        if (path.isClosed) {\n            result.multiPartPath.push(path.points[0]);\n        }\n        return result;\n    }\n\n    pathToSvgText(path: SvgPath, fpPrecision: number): string {\n        let dAttrBuilder = \"M\";\n        if (path.multiPartPath.length === 0) {\n            dAttrBuilder += ` ${roundAndStrip(path.start.x, fpPrecision)},${roundAndStrip(path.start.y, fpPrecision)} ` +\n                `${roundAndStrip(path.end.x, fpPrecision)},${roundAndStrip(path.end.y, fpPrecision)}`;\n        } else {\n            for (const point of path.multiPartPath) {\n                dAttrBuilder += ` ${roundAndStrip(point.x, fpPrecision)},${roundAndStrip(point.y, fpPrecision)}`;\n            }\n            if (path.multiPartPath[0].equals(path.multiPartPath[path.multiPartPath.length - 1])) {\n                dAttrBuilder += \" Z\"; // closed path\n            }\n        }\n        return `<path style=\"${path.style}\" d=\"${dAttrBuilder}\" id=\"${path.id || \"\"}\"/>`;\n    }\n\n    rectToSvgText(rect: Rect, fpPrecision: number): string {\n        return `<rect style=\"${rect.style}\" x=\"${roundAndStrip(rect.x, fpPrecision)}\" y=\"${roundAndStrip(rect.y, fpPrecision)}\" ` +\n            `width=\"${roundAndStrip(rect.width, fpPrecision)}\" height=\"${roundAndStrip(rect.height, fpPrecision)}\"/>`;\n    }\n\n    vectorNumberToSvgText(vectorNumber: VectorNumber, fpPrecision: number): string {\n        const vnStr = vectorNumber.number.toString();\n        const stringShape = new Shape();\n        for (let i = 0; i < vnStr.length; i++) {\n            const c = vnStr.charAt(i);\n            const charShape = VectorNumber.characterToShape(c);\n            const currentWidth = i * CHARACTER_WIDTH;\n            charShape.translate(new OrderedPair(new Big(currentWidth), ZERO));\n            stringShape.addShape(charShape);\n        }\n        stringShape.scale(new OrderedPair(vectorNumber.width.div(CHARACTER_WIDTH * vnStr.length),\n            vectorNumber.height.div(CHARACTER_HEIGHT))).translate(vectorNumber.position);\n        let svgTextBuilder = \"\";\n        for (const path of stringShape.paths) {\n            const svgPath = this.modelPathToSvgPath(path);\n            svgPath.style = svgPath.style.replace(\"000000\", \"0000ff\");\n            svgTextBuilder += this.pathToSvgText(svgPath, fpPrecision);\n        }\n        return svgTextBuilder.toString();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/svg/svg-element-generator.ts","import { Directive, Input, HostListener } from \"@angular/core\";\n\n@Directive({\n    selector: \"[appTrackClick]\"\n})\nexport class TrackClickDirective {\n    @Input() category: string;\n    @Input() label: string;\n\n    constructor() {}\n\n    @HostListener(\"click\")\n    onClick(): void {\n        (<any>window).ga(\"send\", {\n            hitType: \"event\",\n            eventCategory: this.category,\n            eventAction: \"externalLink\",\n            eventLabel: this.label\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/track-click.directive.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/welcome/welcome.component.css\n// module id = ./src/app/welcome/welcome.component.css\n// module chunks = main","module.exports = \"<div>\\n    <p>Welcome to the Laser-Cut Maze Designer, by Aaron Rodriguez</p>\\n    <p>With this tool and a laser cutter such as a <a href=\\\"https://glowforge.us/IAVRVMWC\\\" target=\\\"_blank\\\">Glowforge</a> or an\\n        <a href=\\\"http://epiloglaser.com\\\" target=\\\"_blank\\\">Epilog</a>, you can create your own wooden toy maze. You can then assemble\\n        it and play with it by rolling around a small marble through the hallways.\\n    </p>\\n</div>\\n<div>\\n    <iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/4fWBe2R-6Nw\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen=\\\"allowfullscreen\\\"></iframe>\\n</div>\\n<div>\\n    <p>Get started <a routerLink=\\\"/LaserCutMazes/designer\\\">here</a></p>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/welcome/welcome.component.html\n// module id = ./src/app/welcome/welcome.component.html\n// module chunks = main","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: \"app-welcome\",\n    templateUrl: \"./welcome.component.html\",\n    styleUrls: [\"./welcome.component.css\"]\n})\nexport class WelcomeComponent implements OnInit {\n    constructor() {}\n\n    ngOnInit() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/welcome/welcome.component.ts","export const environment = {\n    production: true\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { AppModule } from \"app/app.module\";\nimport { environment } from \"environments/environment\";\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}